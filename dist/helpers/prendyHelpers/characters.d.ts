import { Vector3 } from "@babylonjs/core";
import { MyTypes } from "../../declarations";
type AnimationNameByModel = MyTypes["Types"]["AnimationNameByModel"];
type CharacterName = MyTypes["Types"]["CharacterName"];
type CharacterOptions = MyTypes["Types"]["CharacterOptions"];
type DollName = MyTypes["Types"]["DollName"];
type DollOptions = MyTypes["Types"]["DollOptions"];
type DollNameFromCharacter<T_CharacterName extends CharacterName> = CharacterOptions[T_CharacterName]["doll"];
type ModelNameFromDoll<T_DollName extends DollName> = DollOptions[T_DollName]["model"];
type ModelNameFromCharacter<T_CharacterName extends CharacterName> = ModelNameFromDoll<DollNameFromCharacter<T_CharacterName>>;
type AnimationNameFromCharacter<T_CharacterName extends CharacterName> = AnimationNameByModel[ModelNameFromCharacter<T_CharacterName>];
export declare function setCharAnimation<T_Character extends CharacterName>(character: T_Character, animation: AnimationNameFromCharacter<T_Character>): void;
export declare function setCharPosition(charName: CharacterName, newPosition: Vector3): void;
export declare function setCharRotationY(charName: CharacterName, newRotationY: number): void;
export declare function springCharRotation(charName: CharacterName, newRotationY: number): void;
export declare function springAddToCharRotationY(charName: CharacterName, addedRotation: number): void;
export declare function lookAtOtherCharacter(charA: CharacterName, charB?: CharacterName): void;
export declare function lookAtEachother(characterA: CharacterName, characterBParam: CharacterName): void;
export declare function moveCharacterAt2DAngle(charName: CharacterName, angle: number): void;
export {};
