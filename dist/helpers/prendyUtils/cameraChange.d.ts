import { MyTypes } from "../../declarations";
import { DefaultCameraRefs } from "../../stores/places";
type AnyCameraName = MyTypes["Types"]["AnyCameraName"];
type AnySegmentName = MyTypes["Types"]["AnySegmentName"];
type PlaceName = MyTypes["Types"]["PlaceName"];
export declare function getSafeCamName(cam: AnyCameraName): AnyCameraName;
export declare function getSafeCamName(cam: null): null;
export declare function getSafeSegmentName<T_PlaceName extends PlaceName, T_CameraName extends AnyCameraName, T_SegmentName extends AnySegmentName>({ cam, place, segment, useStorySegmentRules, }: {
    place: T_PlaceName;
    cam: T_CameraName;
    segment: T_SegmentName;
    useStorySegmentRules?: boolean;
}): any;
export declare function updateTexturesForNowCamera(newCameraName: AnyCameraName, didChangePlace?: boolean): void;
export declare function addMeshesToRenderLists(newCamRef: DefaultCameraRefs): void;
export declare function updateVideoTexturesForNewPlace(nowPlaceName: PlaceName): void;
export declare function updateVideoTexture(): void;
export declare function applyProbeToAllDollMaterials(): void;
export declare function applyProbeToAllParticleMaterials(): void;
export declare function updateNowStuffWhenSliceChanged(): void;
export {};
