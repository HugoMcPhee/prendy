import { MyTypes } from "../../declarations";
import { SliceVidState, VidSlice } from "../../stores/sliceVids";
export declare const BEFORE_LOOP_PADDING = 0.05;
type PlaceName = MyTypes["Types"]["PlaceName"];
export declare function getSliceVidVideo(itemName: PlaceName): any;
export declare function getSliceVidWaitingVideo(itemName: PlaceName): any;
type CameraNameByPlace = MyTypes["Types"]["CameraNameByPlace"];
type SegmentNameByPlace = MyTypes["Types"]["SegmentNameByPlace"];
export declare function doWhenSliceVidStateChanges(sliceVidId: PlaceName, checkShouldRun: (newVidState: SliceVidState) => boolean, callback: () => void): string | null;
export declare function doWhenSliceVidPlaying(sliceVidId: PlaceName, callback: () => void): string | null;
export declare function doWhenSliceVidPlayingAsync(sliceVidId: PlaceName): Promise<void>;
export declare function getSliceEndTime(slice: VidSlice): number;
export declare function getSliceForPlace<T_PlaceName extends PlaceName>(place: T_PlaceName, camName: CameraNameByPlace[T_PlaceName], segment: SegmentNameByPlace[T_PlaceName]): {
    time: any;
    duration: number;
};
export declare function checkIfVideoUnloading(placeName: PlaceName): boolean;
export declare function checkIfVideoAlreadyChanging(placeName: PlaceName): boolean;
export declare function checkForVideoLoop(placeName: PlaceName): boolean;
export {};
