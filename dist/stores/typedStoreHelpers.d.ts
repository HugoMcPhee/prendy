/// <reference types="node" />
import { StoreHelperTypes } from "repond";
export declare type CharacterOptionsPlaceholder<CharacterName extends string, DollName extends string, FontName extends string> = Record<CharacterName, {
    doll: any;
    font: any;
}>;
export declare type DollOptionsPlaceholder<DollName extends string, ModelName extends string> = Record<DollName, {
    model: any;
}>;
declare const placeholderPrendyStores: {
    keyboards: {
        startStates: {
            main: {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            };
        };
        state: () => {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        };
        refs: () => {};
    };
    miniBubbles: {
        state: <T_ItemName extends string>(_itemName: T_ItemName, options?: {
            character?: string | undefined;
        } | undefined) => {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        };
        refs: () => {
            bubbleRef: any;
            textRef: any;
            videoRef: HTMLVideoElement | null;
        };
        startStates: {
            [x: string]: {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            };
        };
    };
    global: {
        startStates: {
            main: {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            };
        };
        state: () => {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        };
        refs: () => {
            sounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            music: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            musicEffects: {
                lowPass: BiquadFilterNode | null;
                compress: DynamicsCompressorNode | null;
                extraGain: GainNode | null;
            };
            solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
            timerSpeed: number;
            aConvoIsHappening_timeout: NodeJS.Timeout | null;
            camSegmentRulesOptions: Partial<{
                [x: string]: Partial<{
                    [x: string]: (usefulStuff: Record<any, any>) => string;
                }>;
            }> | null;
            onPickupButtonClick: ((pickupName: any) => void) | null;
            slateZoomMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "slateZoom";
                    valueGoal: "slateZoomGoal";
                    isMoving: "slateZoomIsMoving";
                    moveMode: "slateZoomMoveMode";
                    physicsConfigName: "slateZoomMoveConfigName";
                    physicsConfigs: "slateZoomMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            slatePosMoverRefs: {
                velocity: import("chootils/dist/points2d").Point2D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "slatePos";
                    valueGoal: "slatePosGoal";
                    isMoving: "slatePosIsMoving";
                    moveMode: "slatePosMoveMode";
                    physicsConfigName: "slatePosMoveConfigName";
                    physicsConfigs: "slatePosMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            scene: import("@babylonjs/core").Scene | null;
            backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
            depthRenderer: import("@babylonjs/core").DepthRenderer | null;
            depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
            backdropPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
            fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropSize: {
                width: number;
                height: number;
            };
            stretchVideoSize: {
                x: number;
                y: number;
            };
            stretchVideoGoalSize: {
                x: number;
                y: number;
            };
            stretchSceneSize: {
                x: number;
                y: number;
            };
        };
    };
    models: {
        startStates: {
            [x: string]: {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            };
        };
        state: <T_ModelName extends string>(_modelName: T_ModelName) => {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        };
        refs: <T_ModelName_1 extends string>(_modelName: T_ModelName_1) => {
            container: import("@babylonjs/core").AssetContainer | null;
            materialRef: import("@babylonjs/core").PBRMaterial | null;
            materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
        };
    };
    dolls: {
        startStates: {
            [x: string]: {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: any;
                goalSpotName: string | null;
            };
        };
        state: <T_DollName extends string, T_ModelName_2 extends string>(_dollName: T_DollName, modelName?: T_ModelName_2 | undefined) => {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: NonNullable<T_ModelName_2>;
            goalSpotName: string | null;
        };
        refs: <T_DollName_1 extends string, T_ModelName_3 extends string>(dollName: T_DollName_1, itemState: {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: NonNullable<T_ModelName_3>;
            goalSpotName: string | null;
        }) => {
            animWeightsMoverRefs: {
                stateNames: {
                    value: "animWeights";
                    valueGoal: "animWeightsGoal";
                    isMoving: "animWeightsIsMoving";
                    moveMode: "animWeightsMoveMode";
                    physicsConfigName: "animWeightsMoveConfigName";
                    physicsConfigs: "animWeightsMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                animRefs: Record<string, {
                    velocity: number;
                    recentSpeeds: number[];
                }>;
                animNames: readonly string[];
            };
            rotationYMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "rotationY";
                    valueGoal: "rotationYGoal";
                    isMoving: "rotationYIsMoving";
                    moveMode: "rotationYMoveMode";
                    physicsConfigName: "rotationYMoveConfigName";
                    physicsConfigs: "rotationYMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            positionMoverRefs: {
                velocity: import("chootils/dist/points3d").Point3D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "position";
                    valueGoal: "positionGoal";
                    isMoving: "positionIsMoving";
                    moveMode: "positionMoveMode";
                    physicsConfigName: "positionMoveConfigName";
                    physicsConfigs: "positionMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            meshRef: import("@babylonjs/core").AbstractMesh | null;
            otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
            entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
            aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
            assetRefs: {
                meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                skeleton: import("@babylonjs/core").Skeleton;
                bones: Record<string, import("@babylonjs/core").Bone>;
                aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                materials: Record<string, import("@babylonjs/core").Material>;
            } | null;
            groundRef: import("@babylonjs/core").AbstractMesh | null;
            checkCollisions: boolean;
        };
    };
    characters: {
        startStates: {
            [x: string]: {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            };
        };
        state: <T_CharacterName extends string, T_DollName_2 extends string>(_characterName: T_CharacterName, dollName?: T_DollName_2 | undefined) => {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        };
        refs: <T_CharacterName_1 extends string>(_characterName: T_CharacterName_1) => {
            testRef: null;
        };
    };
    players: {
        startStates: {
            main: {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            };
        };
        state: () => {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        };
        refs: () => {
            walkSpeed: number;
            canJumpTimeout: NodeJS.Timeout | null;
            canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
            canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
        };
    };
    speechBubbles: any;
    places: {
        startStates: {
            [x: string]: {
                testState: number;
            };
        };
        state: <K_PlaceName extends string>(itemName: string | K_PlaceName) => {
            testState: number;
        };
        refs: <K_PlaceName_1 extends string>(itemName: K_PlaceName_1 & string) => {
            rootMesh: import("@babylonjs/core").AbstractMesh | null;
            spotPositions: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            spotRotations: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            soundspotSounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            triggerMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            wallMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            camsRefs: {
                [x: string]: {
                    camera: import("@babylonjs/core").TargetCamera | null;
                    camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                    probeTexture: import("@babylonjs/core").CubeTexture | null;
                    isTriggerable: boolean;
                };
            };
        };
    };
    stateVids: {
        state: <T_ItemName_1 extends string>(itemName: T_ItemName_1) => {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        };
        refs: () => {
            videoElement: HTMLVideoElement | null;
        };
        startStates: import("repond").InitialItemsState<(<T_ItemName_1 extends string>(itemName: T_ItemName_1) => {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        })>;
    };
    sliceVids: {
        state: <T_ItemName_2 extends string>(itemName: T_ItemName_2) => {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        };
        refs: () => {
            waitingForPlayToDoLoopRuleName: string | null;
        };
        startStates: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    };
    story: {
        startStates: {
            main: any;
        };
        state: () => any;
        refs: () => Record<string, any>;
    };
};
declare const storeHelpers: {
    getPreviousState: () => {
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    };
    getState: () => {
        readonly global: {
            readonly main: {
                readonly slatePosMoveConfigName: string;
                readonly timeScreenResized: number;
                readonly interactButtonPressTime: number;
                readonly heldPickups: string[];
                readonly storyOverlayToggled: boolean;
                readonly alarmTextIsVisible: boolean;
                readonly alarmText: string;
                readonly aSpeechBubbleIsShowing: boolean;
                readonly aConvoIsHappening: boolean;
                readonly frameTick: number;
                readonly debugMessage: string;
                readonly slateZoom: number;
                readonly slateZoomGoal: number;
                readonly slateZoomIsMoving: boolean;
                readonly slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly slateZoomMoveConfigName: string;
                readonly slateZoomMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly slatePos: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly slatePosGoal: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly slatePosIsMoving: boolean;
                readonly slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly slatePosMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly nowPlaceName: string;
                readonly goalPlaceName: string | null;
                readonly readyToSwapPlace: boolean;
                readonly isLoadingBetweenPlaces: boolean;
                readonly loadingOverlayToggled: boolean;
                readonly loadingOverlayFullyShowing: boolean;
                readonly goalCamWhenNextPlaceLoads: string | null;
                readonly goalCamNameWhenVidPlays: string | null;
                readonly goalCamNameAtLoop: string | null;
                readonly goalCamName: string | null;
                readonly nowCamName: string;
                readonly nowSegmentName: string;
                readonly goalSegmentName: string | null;
                readonly goalSegmentNameAtLoop: string | null;
                readonly goalSegmentNameWhenVidPlays: string | null;
                readonly goalSegmentWhenGoalPlaceLoads: string | null;
                readonly modelNamesLoaded: string[];
                readonly newPlaceModelLoaded: boolean;
                readonly newPlaceVideosLoaded: boolean;
                readonly newPlaceProbesLoaded: boolean;
                readonly playerCharacter: string;
                readonly gravityValue: number;
                readonly playerMovingPaused: boolean;
                readonly focusedDoll: any;
                readonly focusedDollIsInView: boolean;
            };
        };
        readonly places: {
            readonly [x: string]: {
                readonly testState: number;
            };
        };
        readonly dolls: {
            readonly [x: string]: {
                readonly nowAnimation: string;
                readonly animationLoops: boolean;
                readonly inRange: {
                    readonly [x: string]: {
                        readonly touch: boolean;
                        readonly talk: boolean;
                        readonly see: boolean;
                    };
                };
                readonly animWeights: {
                    readonly [x: string]: number;
                };
                readonly animWeightsGoal: {
                    readonly [x: string]: number;
                };
                readonly animWeightsIsMoving: boolean;
                readonly animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly animWeightsMoveConfigName: string;
                readonly animWeightsMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly positionOnScreen: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly rotationY: number;
                readonly rotationYGoal: number;
                readonly rotationYIsMoving: boolean;
                readonly rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly rotationYMoveConfigName: string;
                readonly rotationYMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionGoal: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionIsMoving: boolean;
                readonly positionMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly positionMoveConfigName: string;
                readonly positionMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly modelName: string;
                readonly goalSpotName: string | null;
            };
            readonly [x: number]: {
                readonly nowAnimation: string;
                readonly animationLoops: boolean;
                readonly inRange: {
                    readonly [x: string]: {
                        readonly touch: boolean;
                        readonly talk: boolean;
                        readonly see: boolean;
                    };
                };
                readonly animWeights: {
                    readonly [x: string]: number;
                };
                readonly animWeightsGoal: {
                    readonly [x: string]: number;
                };
                readonly animWeightsIsMoving: boolean;
                readonly animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly animWeightsMoveConfigName: string;
                readonly animWeightsMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly positionOnScreen: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly rotationY: number;
                readonly rotationYGoal: number;
                readonly rotationYIsMoving: boolean;
                readonly rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly rotationYMoveConfigName: string;
                readonly rotationYMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionGoal: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionIsMoving: boolean;
                readonly positionMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly positionMoveConfigName: string;
                readonly positionMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly modelName: string;
                readonly goalSpotName: string | null;
            };
        };
        readonly models: {
            readonly [x: string]: {
                readonly wantToLoad: boolean;
                readonly isLoading: boolean;
                readonly isLoaded: boolean;
            };
        };
        readonly story: {
            readonly main: any;
        };
        readonly keyboards: {
            readonly main: {
                readonly KeyW: boolean;
                readonly KeyA: boolean;
                readonly KeyS: boolean;
                readonly KeyD: boolean;
                readonly ArrowLeft: boolean;
                readonly ArrowRight: boolean;
                readonly ArrowUp: boolean;
                readonly ArrowDown: boolean;
                readonly KeyQ: boolean;
                readonly KeyE: boolean;
                readonly ShiftLeft: boolean;
                readonly ControlLeft: boolean;
                readonly Space: boolean;
                readonly Enter: boolean;
                readonly KeyZ: boolean;
                readonly KeyM: boolean;
            };
        };
        readonly miniBubbles: {
            readonly [x: string]: {
                readonly isVisible: boolean;
                readonly isFullyHidden: boolean;
                readonly text: string;
                readonly forCharacter: string | null;
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                };
            };
            readonly [x: number]: {
                readonly isVisible: boolean;
                readonly isFullyHidden: boolean;
                readonly text: string;
                readonly forCharacter: string | null;
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                };
            };
        };
        readonly characters: {
            readonly [x: string]: {
                readonly dollName: string;
                readonly atTriggers: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly atCamCubes: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly hasLeftFirstTrigger: boolean;
            };
            readonly [x: number]: {
                readonly dollName: string;
                readonly atTriggers: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly atCamCubes: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly hasLeftFirstTrigger: boolean;
            };
        };
        readonly players: {
            readonly main: {
                readonly lastSafeInputAngle: number | null;
                readonly inputVelocity: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly isJumping: boolean;
                readonly isOnGround: boolean;
                readonly canJump: boolean;
                readonly interactButtonPressTime: number;
                readonly jumpButtonPressTime: number;
                readonly jumpButtonReleaseTime: number;
                readonly pickupButtonPressTime: number;
                readonly virtualControlsPressTime: number;
                readonly virtualControlsReleaseTime: number;
                readonly canShowVirtualButtons: boolean;
                readonly animationNames: {
                    readonly walking: string;
                    readonly idle: string;
                };
            };
        };
        readonly speechBubbles: {
            readonly [x: string]: any;
            readonly [x: number]: any;
            readonly [x: symbol]: any;
        };
        readonly stateVids: {
            readonly [x: string]: {
                readonly vidState: import("./stateVids").VidState;
                readonly playType: "pause" | "play";
                readonly goalSeekTime: number | null;
                readonly wantToPlay: boolean;
                readonly wantToPause: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoad: boolean;
                readonly videoSource: string;
                readonly autoplay: boolean;
            };
            readonly [x: number]: {
                readonly vidState: import("./stateVids").VidState;
                readonly playType: "pause" | "play";
                readonly goalSeekTime: number | null;
                readonly wantToPlay: boolean;
                readonly wantToPause: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoad: boolean;
                readonly videoSource: string;
                readonly autoplay: boolean;
            };
        };
        readonly sliceVids: {
            readonly [x: string]: {
                readonly stateVidId_playing: string | null;
                readonly stateVidId_waiting: string | null;
                readonly sliceVidState: import("./sliceVids").SliceVidState;
                readonly nowSlice: {
                    readonly time: number;
                    readonly duration: number;
                };
                readonly goalSlice: {
                    readonly time: number;
                    readonly duration: number;
                } | null;
                readonly wantToLoad: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoop: boolean;
                readonly switchSlice_keepProgress: boolean;
                readonly newPlayingVidStartedTime: number;
                readonly nowSliceSeekedTime: number;
            };
        };
    };
    setState: import("repond/dist/types").SetRepondState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>;
    onNextTick: (callback: import("repond/dist/types").RepondCallback) => void;
    getRefs: () => {
        global: Record<"main", {
            sounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            music: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            musicEffects: {
                lowPass: BiquadFilterNode | null;
                compress: DynamicsCompressorNode | null;
                extraGain: GainNode | null;
            };
            solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
            timerSpeed: number;
            aConvoIsHappening_timeout: NodeJS.Timeout | null;
            camSegmentRulesOptions: Partial<{
                [x: string]: Partial<{
                    [x: string]: (usefulStuff: Record<any, any>) => string;
                }>;
            }> | null;
            onPickupButtonClick: ((pickupName: any) => void) | null;
            slateZoomMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "slateZoom";
                    valueGoal: "slateZoomGoal";
                    isMoving: "slateZoomIsMoving";
                    moveMode: "slateZoomMoveMode";
                    physicsConfigName: "slateZoomMoveConfigName";
                    physicsConfigs: "slateZoomMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            slatePosMoverRefs: {
                velocity: import("chootils/dist/points2d").Point2D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "slatePos";
                    valueGoal: "slatePosGoal";
                    isMoving: "slatePosIsMoving";
                    moveMode: "slatePosMoveMode";
                    physicsConfigName: "slatePosMoveConfigName";
                    physicsConfigs: "slatePosMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            scene: import("@babylonjs/core").Scene | null;
            backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
            depthRenderer: import("@babylonjs/core").DepthRenderer | null;
            depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
            backdropPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
            fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropSize: {
                width: number;
                height: number;
            };
            stretchVideoSize: {
                x: number;
                y: number;
            };
            stretchVideoGoalSize: {
                x: number;
                y: number;
            };
            stretchSceneSize: {
                x: number;
                y: number;
            };
        }>;
        places: Record<string, {
            rootMesh: import("@babylonjs/core").AbstractMesh | null;
            spotPositions: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            spotRotations: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            soundspotSounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            triggerMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            wallMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            camsRefs: {
                [x: string]: {
                    camera: import("@babylonjs/core").TargetCamera | null;
                    camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                    probeTexture: import("@babylonjs/core").CubeTexture | null;
                    isTriggerable: boolean;
                };
            };
        }>;
        dolls: Record<string | number, {
            animWeightsMoverRefs: {
                stateNames: {
                    value: "animWeights";
                    valueGoal: "animWeightsGoal";
                    isMoving: "animWeightsIsMoving";
                    moveMode: "animWeightsMoveMode";
                    physicsConfigName: "animWeightsMoveConfigName";
                    physicsConfigs: "animWeightsMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                animRefs: Record<string, {
                    velocity: number;
                    recentSpeeds: number[];
                }>;
                animNames: readonly string[];
            };
            rotationYMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "rotationY";
                    valueGoal: "rotationYGoal";
                    isMoving: "rotationYIsMoving";
                    moveMode: "rotationYMoveMode";
                    physicsConfigName: "rotationYMoveConfigName";
                    physicsConfigs: "rotationYMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            positionMoverRefs: {
                velocity: import("chootils/dist/points3d").Point3D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "position";
                    valueGoal: "positionGoal";
                    isMoving: "positionIsMoving";
                    moveMode: "positionMoveMode";
                    physicsConfigName: "positionMoveConfigName";
                    physicsConfigs: "positionMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            meshRef: import("@babylonjs/core").AbstractMesh | null;
            otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
            entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
            aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
            assetRefs: {
                meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                skeleton: import("@babylonjs/core").Skeleton;
                bones: Record<string, import("@babylonjs/core").Bone>;
                aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                materials: Record<string, import("@babylonjs/core").Material>;
            } | null;
            groundRef: import("@babylonjs/core").AbstractMesh | null;
            checkCollisions: boolean;
        }>;
        models: Record<string, {
            container: import("@babylonjs/core").AssetContainer | null;
            materialRef: import("@babylonjs/core").PBRMaterial | null;
            materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
        }>;
        story: Record<"main", Record<string, any>>;
        keyboards: Record<"main", {}>;
        miniBubbles: Record<string | number, {
            bubbleRef: any;
            textRef: any;
            videoRef: HTMLVideoElement | null;
        }>;
        characters: Record<string | number, {
            testRef: null;
        }>;
        players: Record<"main", {
            walkSpeed: number;
            canJumpTimeout: NodeJS.Timeout | null;
            canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
            canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            videoElement: HTMLVideoElement | null;
        }>;
        sliceVids: Record<string, {
            waitingForPlayToDoLoopRuleName: string | null;
        }>;
    };
    getItem: <K_Type_2 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", T_ItemName extends import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_2]>>>(type: K_Type_2, name: T_ItemName) => [{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_2][T_ItemName], {
        global: Record<"main", {
            sounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            music: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            musicEffects: {
                lowPass: BiquadFilterNode | null;
                compress: DynamicsCompressorNode | null;
                extraGain: GainNode | null;
            };
            solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
            timerSpeed: number;
            aConvoIsHappening_timeout: NodeJS.Timeout | null;
            camSegmentRulesOptions: Partial<{
                [x: string]: Partial<{
                    [x: string]: (usefulStuff: Record<any, any>) => string;
                }>;
            }> | null;
            onPickupButtonClick: ((pickupName: any) => void) | null;
            slateZoomMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "slateZoom";
                    valueGoal: "slateZoomGoal";
                    isMoving: "slateZoomIsMoving";
                    moveMode: "slateZoomMoveMode";
                    physicsConfigName: "slateZoomMoveConfigName";
                    physicsConfigs: "slateZoomMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            slatePosMoverRefs: {
                velocity: import("chootils/dist/points2d").Point2D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "slatePos";
                    valueGoal: "slatePosGoal";
                    isMoving: "slatePosIsMoving";
                    moveMode: "slatePosMoveMode";
                    physicsConfigName: "slatePosMoveConfigName";
                    physicsConfigs: "slatePosMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            scene: import("@babylonjs/core").Scene | null;
            backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
            depthRenderer: import("@babylonjs/core").DepthRenderer | null;
            depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
            backdropPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
            fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
            backdropSize: {
                width: number;
                height: number;
            };
            stretchVideoSize: {
                x: number;
                y: number;
            };
            stretchVideoGoalSize: {
                x: number;
                y: number;
            };
            stretchSceneSize: {
                x: number;
                y: number;
            };
        }>;
        places: Record<string, {
            rootMesh: import("@babylonjs/core").AbstractMesh | null;
            spotPositions: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            spotRotations: {
                [x: string]: import("@babylonjs/core").Vector3;
            };
            soundspotSounds: {
                [x: string]: import("@babylonjs/core").Sound | null;
            };
            triggerMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            wallMeshes: {
                [x: string]: import("@babylonjs/core").AbstractMesh | null;
            };
            camsRefs: {
                [x: string]: {
                    camera: import("@babylonjs/core").TargetCamera | null;
                    camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                    probeTexture: import("@babylonjs/core").CubeTexture | null;
                    isTriggerable: boolean;
                };
            };
        }>;
        dolls: Record<string | number, {
            animWeightsMoverRefs: {
                stateNames: {
                    value: "animWeights";
                    valueGoal: "animWeightsGoal";
                    isMoving: "animWeightsIsMoving";
                    moveMode: "animWeightsMoveMode";
                    physicsConfigName: "animWeightsMoveConfigName";
                    physicsConfigs: "animWeightsMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                animRefs: Record<string, {
                    velocity: number;
                    recentSpeeds: number[];
                }>;
                animNames: readonly string[];
            };
            rotationYMoverRefs: {
                velocity: number;
                recentSpeeds: number[];
                stateNames: {
                    value: "rotationY";
                    valueGoal: "rotationYGoal";
                    isMoving: "rotationYIsMoving";
                    moveMode: "rotationYMoveMode";
                    physicsConfigName: "rotationYMoveConfigName";
                    physicsConfigs: "rotationYMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            positionMoverRefs: {
                velocity: import("chootils/dist/points3d").Point3D;
                recentSpeeds: number[];
                averageSpeed: number;
                canRunOnSlow: boolean;
                stateNames: {
                    value: "position";
                    valueGoal: "positionGoal";
                    isMoving: "positionIsMoving";
                    moveMode: "positionMoveMode";
                    physicsConfigName: "positionMoveConfigName";
                    physicsConfigs: "positionMoveConfigs";
                };
                physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
            };
            meshRef: import("@babylonjs/core").AbstractMesh | null;
            otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
            entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
            aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
            assetRefs: {
                meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                skeleton: import("@babylonjs/core").Skeleton;
                bones: Record<string, import("@babylonjs/core").Bone>;
                aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                materials: Record<string, import("@babylonjs/core").Material>;
            } | null;
            groundRef: import("@babylonjs/core").AbstractMesh | null;
            checkCollisions: boolean;
        }>;
        models: Record<string, {
            container: import("@babylonjs/core").AssetContainer | null;
            materialRef: import("@babylonjs/core").PBRMaterial | null;
            materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
        }>;
        story: Record<"main", Record<string, any>>;
        keyboards: Record<"main", {}>;
        miniBubbles: Record<string | number, {
            bubbleRef: any;
            textRef: any;
            videoRef: HTMLVideoElement | null;
        }>;
        characters: Record<string | number, {
            testRef: null;
        }>;
        players: Record<"main", {
            walkSpeed: number;
            canJumpTimeout: NodeJS.Timeout | null;
            canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
            canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            videoElement: HTMLVideoElement | null;
        }>;
        sliceVids: Record<string, {
            waitingForPlayToDoLoopRuleName: string | null;
        }>;
    }[K_Type_2][T_ItemName], {
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_2][T_ItemName]];
    makeRules: <K_RuleName extends string, K_RulesToAdd extends (arg0: {
        itemEffect: <K_Type_3 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", K_PropertyName extends import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_3][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_3]>>]>>(options: {
            check: {
                prop?: K_PropertyName | undefined;
                type: K_Type_3;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>[] | undefined;
                becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
                addedOrRemoved?: undefined;
            } | {
                prop?: K_PropertyName[] | undefined;
                type: K_Type_3;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>[] | undefined;
                becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
                addedOrRemoved?: undefined;
            };
            run: (loopedInfo: {
                itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>;
                newValue: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>][K_PropertyName];
                previousValue: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>][K_PropertyName];
                itemState: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>];
                itemRefs: {
                    global: Record<"main", {
                        sounds: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        music: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        musicEffects: {
                            lowPass: BiquadFilterNode | null;
                            compress: DynamicsCompressorNode | null;
                            extraGain: GainNode | null;
                        };
                        solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                        timerSpeed: number;
                        aConvoIsHappening_timeout: NodeJS.Timeout | null;
                        camSegmentRulesOptions: Partial<{
                            [x: string]: Partial<{
                                [x: string]: (usefulStuff: Record<any, any>) => string;
                            }>;
                        }> | null;
                        onPickupButtonClick: ((pickupName: any) => void) | null;
                        slateZoomMoverRefs: {
                            velocity: number;
                            recentSpeeds: number[];
                            stateNames: {
                                value: "slateZoom";
                                valueGoal: "slateZoomGoal";
                                isMoving: "slateZoomIsMoving";
                                moveMode: "slateZoomMoveMode";
                                physicsConfigName: "slateZoomMoveConfigName";
                                physicsConfigs: "slateZoomMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        slatePosMoverRefs: {
                            velocity: import("chootils/dist/points2d").Point2D;
                            recentSpeeds: number[];
                            averageSpeed: number;
                            canRunOnSlow: boolean;
                            stateNames: {
                                value: "slatePos";
                                valueGoal: "slatePosGoal";
                                isMoving: "slatePosIsMoving";
                                moveMode: "slatePosMoveMode";
                                physicsConfigName: "slatePosMoveConfigName";
                                physicsConfigs: "slatePosMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        scene: import("@babylonjs/core").Scene | null;
                        backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                        depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                        depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                        backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                        backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                        fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                        backdropSize: {
                            width: number;
                            height: number;
                        };
                        stretchVideoSize: {
                            x: number;
                            y: number;
                        };
                        stretchVideoGoalSize: {
                            x: number;
                            y: number;
                        };
                        stretchSceneSize: {
                            x: number;
                            y: number;
                        };
                    }>;
                    places: Record<string, {
                        rootMesh: import("@babylonjs/core").AbstractMesh | null;
                        spotPositions: {
                            [x: string]: import("@babylonjs/core").Vector3;
                        };
                        spotRotations: {
                            [x: string]: import("@babylonjs/core").Vector3;
                        };
                        soundspotSounds: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        triggerMeshes: {
                            [x: string]: import("@babylonjs/core").AbstractMesh | null;
                        };
                        wallMeshes: {
                            [x: string]: import("@babylonjs/core").AbstractMesh | null;
                        };
                        camsRefs: {
                            [x: string]: {
                                camera: import("@babylonjs/core").TargetCamera | null;
                                camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                                probeTexture: import("@babylonjs/core").CubeTexture | null;
                                isTriggerable: boolean;
                            };
                        };
                    }>;
                    dolls: Record<string | number, {
                        animWeightsMoverRefs: {
                            stateNames: {
                                value: "animWeights";
                                valueGoal: "animWeightsGoal";
                                isMoving: "animWeightsIsMoving";
                                moveMode: "animWeightsMoveMode";
                                physicsConfigName: "animWeightsMoveConfigName";
                                physicsConfigs: "animWeightsMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                            animRefs: Record<string, {
                                velocity: number;
                                recentSpeeds: number[];
                            }>;
                            animNames: readonly string[];
                        };
                        rotationYMoverRefs: {
                            velocity: number;
                            recentSpeeds: number[];
                            stateNames: {
                                value: "rotationY";
                                valueGoal: "rotationYGoal";
                                isMoving: "rotationYIsMoving";
                                moveMode: "rotationYMoveMode";
                                physicsConfigName: "rotationYMoveConfigName";
                                physicsConfigs: "rotationYMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        positionMoverRefs: {
                            velocity: import("chootils/dist/points3d").Point3D;
                            recentSpeeds: number[];
                            averageSpeed: number;
                            canRunOnSlow: boolean;
                            stateNames: {
                                value: "position";
                                valueGoal: "positionGoal";
                                isMoving: "positionIsMoving";
                                moveMode: "positionMoveMode";
                                physicsConfigName: "positionMoveConfigName";
                                physicsConfigs: "positionMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        meshRef: import("@babylonjs/core").AbstractMesh | null;
                        otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                        entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                        aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                        assetRefs: {
                            meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                            skeleton: import("@babylonjs/core").Skeleton;
                            bones: Record<string, import("@babylonjs/core").Bone>;
                            aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                            materials: Record<string, import("@babylonjs/core").Material>;
                        } | null;
                        groundRef: import("@babylonjs/core").AbstractMesh | null;
                        checkCollisions: boolean;
                    }>;
                    models: Record<string, {
                        container: import("@babylonjs/core").AssetContainer | null;
                        materialRef: import("@babylonjs/core").PBRMaterial | null;
                        materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
                    }>;
                    story: Record<"main", Record<string, any>>;
                    keyboards: Record<"main", {}>;
                    miniBubbles: Record<string | number, {
                        bubbleRef: any;
                        textRef: any;
                        videoRef: HTMLVideoElement | null;
                    }>;
                    characters: Record<string | number, {
                        testRef: null;
                    }>;
                    players: Record<"main", {
                        walkSpeed: number;
                        canJumpTimeout: NodeJS.Timeout | null;
                        canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                        canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        videoElement: HTMLVideoElement | null;
                    }>;
                    sliceVids: Record<string, {
                        waitingForPlayToDoLoopRuleName: string | null;
                    }>;
                }[K_Type_3][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_3]>>];
                frameDuration: number;
            }) => void;
            atStepEnd?: boolean | undefined;
            name?: string | undefined;
            step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        }) => any;
        effect: <K_Type_4 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids">(options: {
            name?: string | undefined;
            check: ({
                type?: K_Type_4 | undefined;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>>[] | undefined;
                prop?: import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>>]>[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            } | {
                type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
                name?: string | string[] | undefined;
                prop?: (string | number | symbol)[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            })[] | ({
                type?: K_Type_4 | undefined;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>>[] | undefined;
                prop?: import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_4]>>]>[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            } | {
                type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
                name?: string | string[] | undefined;
                prop?: (string | number | symbol)[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            });
            run: (diffInfo: {
                itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
                itemsChanged: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                propsChanged: {
                    global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                        all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
                    };
                    places: Record<string, "testState"[]> & {
                        all__: "testState"[];
                    };
                    dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                        all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
                    };
                    models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                        all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
                    };
                    story: Record<"main", (string | number | symbol)[]> & {
                        all__: (string | number | symbol)[];
                    };
                    keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                        all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
                    };
                    miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                        all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
                    };
                    characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                        all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
                    };
                    players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                        all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
                    };
                    speechBubbles: Record<string, (string | number | symbol)[]> & {
                        all__: (string | number | symbol)[];
                    };
                    stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                        all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
                    };
                    sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                        all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
                    };
                } & {
                    all__: (string | number | symbol)[];
                };
                itemsAdded: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                itemsRemoved: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
                itemsChangedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
                propsChangedBool: {
                    global: Record<"main", {
                        nowPlaceName: boolean;
                        nowCamName: boolean;
                        slatePosGoal: boolean;
                        slatePos: boolean;
                        focusedDoll: boolean;
                        slateZoom: boolean;
                        slateZoomGoal: boolean;
                        focusedDollIsInView: boolean;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: boolean;
                        slatePosMoveConfigName: boolean;
                        slatePosMoveConfigs: boolean;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: boolean;
                        slateZoomMoveConfigName: boolean;
                        slateZoomMoveConfigs: boolean;
                        playerCharacter: boolean;
                        playerMovingPaused: boolean;
                        heldPickups: boolean;
                        nowSegmentName: boolean;
                        aConvoIsHappening: boolean;
                        isLoadingBetweenPlaces: boolean;
                        storyOverlayToggled: boolean;
                        goalCamName: boolean;
                        goalSegmentNameAtLoop: boolean;
                        goalCamNameAtLoop: boolean;
                        alarmText: boolean;
                        alarmTextIsVisible: boolean;
                        interactButtonPressTime: boolean;
                        modelNamesLoaded: boolean;
                        goalSegmentNameWhenVidPlays: boolean;
                        goalCamNameWhenVidPlays: boolean;
                        timeScreenResized: boolean;
                        goalSegmentName: boolean;
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        loadingOverlayFullyShowing: boolean;
                        frameTick: boolean;
                        loadingOverlayToggled: boolean;
                        goalPlaceName: boolean;
                        readyToSwapPlace: boolean;
                        goalSegmentWhenGoalPlaceLoads: boolean;
                        goalCamWhenNextPlaceLoads: boolean;
                        aSpeechBubbleIsShowing: boolean;
                        gravityValue: boolean;
                        debugMessage: boolean;
                    }> & {
                        all__: {
                            nowPlaceName: boolean;
                            nowCamName: boolean;
                            slatePosGoal: boolean;
                            slatePos: boolean;
                            focusedDoll: boolean;
                            slateZoom: boolean;
                            slateZoomGoal: boolean;
                            focusedDollIsInView: boolean;
                            slatePosIsMoving: boolean;
                            slatePosMoveMode: boolean;
                            slatePosMoveConfigName: boolean;
                            slatePosMoveConfigs: boolean;
                            slateZoomIsMoving: boolean;
                            slateZoomMoveMode: boolean;
                            slateZoomMoveConfigName: boolean;
                            slateZoomMoveConfigs: boolean;
                            playerCharacter: boolean;
                            playerMovingPaused: boolean;
                            heldPickups: boolean;
                            nowSegmentName: boolean;
                            aConvoIsHappening: boolean;
                            isLoadingBetweenPlaces: boolean;
                            storyOverlayToggled: boolean;
                            goalCamName: boolean;
                            goalSegmentNameAtLoop: boolean;
                            goalCamNameAtLoop: boolean;
                            alarmText: boolean;
                            alarmTextIsVisible: boolean;
                            interactButtonPressTime: boolean;
                            modelNamesLoaded: boolean;
                            goalSegmentNameWhenVidPlays: boolean;
                            goalCamNameWhenVidPlays: boolean;
                            timeScreenResized: boolean;
                            goalSegmentName: boolean;
                            newPlaceModelLoaded: boolean;
                            newPlaceVideosLoaded: boolean;
                            newPlaceProbesLoaded: boolean;
                            loadingOverlayFullyShowing: boolean;
                            frameTick: boolean;
                            loadingOverlayToggled: boolean;
                            goalPlaceName: boolean;
                            readyToSwapPlace: boolean;
                            goalSegmentWhenGoalPlaceLoads: boolean;
                            goalCamWhenNextPlaceLoads: boolean;
                            aSpeechBubbleIsShowing: boolean;
                            gravityValue: boolean;
                            debugMessage: boolean;
                        };
                    };
                    places: Record<string, {
                        testState: boolean;
                    }> & {
                        all__: {
                            testState: boolean;
                        };
                    };
                    dolls: Record<string, {
                        modelName: boolean;
                        position: boolean;
                        animWeightsGoal: boolean;
                        nowAnimation: boolean;
                        positionOnScreen: boolean;
                        positionGoal: boolean;
                        positionIsMoving: boolean;
                        positionMoveMode: boolean;
                        positionMoveConfigName: boolean;
                        positionMoveConfigs: boolean;
                        rotationY: boolean;
                        rotationYGoal: boolean;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: boolean;
                        rotationYMoveConfigName: boolean;
                        rotationYMoveConfigs: boolean;
                        animWeights: boolean;
                        animWeightsMoveConfigName: boolean;
                        animWeightsMoveConfigs: boolean;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: boolean;
                        inRange: boolean;
                        goalSpotName: boolean;
                        animationLoops: boolean;
                    }> & {
                        all__: {
                            modelName: boolean;
                            position: boolean;
                            animWeightsGoal: boolean;
                            nowAnimation: boolean;
                            positionOnScreen: boolean;
                            positionGoal: boolean;
                            positionIsMoving: boolean;
                            positionMoveMode: boolean;
                            positionMoveConfigName: boolean;
                            positionMoveConfigs: boolean;
                            rotationY: boolean;
                            rotationYGoal: boolean;
                            rotationYIsMoving: boolean;
                            rotationYMoveMode: boolean;
                            rotationYMoveConfigName: boolean;
                            rotationYMoveConfigs: boolean;
                            animWeights: boolean;
                            animWeightsMoveConfigName: boolean;
                            animWeightsMoveConfigs: boolean;
                            animWeightsIsMoving: boolean;
                            animWeightsMoveMode: boolean;
                            inRange: boolean;
                            goalSpotName: boolean;
                            animationLoops: boolean;
                        };
                    };
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoaded: boolean;
                        isLoading: boolean;
                    }> & {
                        all__: {
                            wantToLoad: boolean;
                            isLoaded: boolean;
                            isLoading: boolean;
                        };
                    };
                    story: Record<"main", {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    }> & {
                        all__: {
                            [x: string]: boolean;
                            [x: number]: boolean;
                            [x: symbol]: boolean;
                        };
                    };
                    keyboards: Record<"main", {
                        ArrowDown: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        KeyE: boolean;
                        Enter: boolean;
                        Space: boolean;
                        KeyM: boolean;
                        KeyQ: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        KeyZ: boolean;
                    }> & {
                        all__: {
                            ArrowDown: boolean;
                            ArrowLeft: boolean;
                            ArrowRight: boolean;
                            ArrowUp: boolean;
                            KeyW: boolean;
                            KeyA: boolean;
                            KeyS: boolean;
                            KeyD: boolean;
                            KeyE: boolean;
                            Enter: boolean;
                            Space: boolean;
                            KeyM: boolean;
                            KeyQ: boolean;
                            ShiftLeft: boolean;
                            ControlLeft: boolean;
                            KeyZ: boolean;
                        };
                    };
                    miniBubbles: Record<string, {
                        position: boolean;
                        isVisible: boolean;
                        text: boolean;
                        forCharacter: boolean;
                        isFullyHidden: boolean;
                    }> & {
                        all__: {
                            position: boolean;
                            isVisible: boolean;
                            text: boolean;
                            forCharacter: boolean;
                            isFullyHidden: boolean;
                        };
                    };
                    characters: Record<string, {
                        dollName: boolean;
                        atTriggers: boolean;
                        hasLeftFirstTrigger: boolean;
                        atCamCubes: boolean;
                    }> & {
                        all__: {
                            dollName: boolean;
                            atTriggers: boolean;
                            hasLeftFirstTrigger: boolean;
                            atCamCubes: boolean;
                        };
                    };
                    players: Record<"main", {
                        animationNames: boolean;
                        interactButtonPressTime: boolean;
                        canShowVirtualButtons: boolean;
                        virtualControlsPressTime: boolean;
                        virtualControlsReleaseTime: boolean;
                        jumpButtonPressTime: boolean;
                        jumpButtonReleaseTime: boolean;
                        inputVelocity: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        isJumping: boolean;
                        lastSafeInputAngle: boolean;
                        pickupButtonPressTime: boolean;
                    }> & {
                        all__: {
                            animationNames: boolean;
                            interactButtonPressTime: boolean;
                            canShowVirtualButtons: boolean;
                            virtualControlsPressTime: boolean;
                            virtualControlsReleaseTime: boolean;
                            jumpButtonPressTime: boolean;
                            jumpButtonReleaseTime: boolean;
                            inputVelocity: boolean;
                            isOnGround: boolean;
                            canJump: boolean;
                            isJumping: boolean;
                            lastSafeInputAngle: boolean;
                            pickupButtonPressTime: boolean;
                        };
                    };
                    speechBubbles: Record<string, {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    }> & {
                        all__: {
                            [x: string]: boolean;
                            [x: number]: boolean;
                            [x: symbol]: boolean;
                        };
                    };
                    stateVids: Record<string, {
                        autoplay: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        vidState: boolean;
                        goalSeekTime: boolean;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        playType: boolean;
                        videoSource: boolean;
                    }> & {
                        all__: {
                            autoplay: boolean;
                            wantToLoad: boolean;
                            wantToUnload: boolean;
                            vidState: boolean;
                            goalSeekTime: boolean;
                            wantToPlay: boolean;
                            wantToPause: boolean;
                            playType: boolean;
                            videoSource: boolean;
                        };
                    };
                    sliceVids: Record<string, {
                        stateVidId_playing: boolean;
                        sliceVidState: boolean;
                        nowSlice: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        newPlayingVidStartedTime: boolean;
                        goalSlice: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        stateVidId_waiting: boolean;
                        nowSliceSeekedTime: boolean;
                    }> & {
                        all__: {
                            stateVidId_playing: boolean;
                            sliceVidState: boolean;
                            nowSlice: boolean;
                            wantToLoad: boolean;
                            wantToUnload: boolean;
                            newPlayingVidStartedTime: boolean;
                            goalSlice: boolean;
                            wantToLoop: boolean;
                            switchSlice_keepProgress: boolean;
                            stateVidId_waiting: boolean;
                            nowSliceSeekedTime: boolean;
                        };
                    };
                } & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                itemsAddedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
                itemsRemovedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
            }, frameDuration: number) => void;
            atStepEnd?: boolean | undefined;
            step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        }) => any;
    }) => Record<K_RuleName, ({} & {
        check: {
            prop?: undefined;
            type: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids";
            name?: string | string[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        } | {
            prop?: never[] | undefined;
            type: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids";
            name?: string | string[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        };
        run: (loopedInfo: {
            itemName: string;
            newValue: never;
            previousValue: never;
            itemState: unknown;
            itemRefs: unknown;
            frameDuration: number;
        }) => void;
        atStepEnd?: boolean | undefined;
        name?: string | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        _isPerItem?: true | undefined;
    }) | ({} & {
        name?: string | undefined;
        check: ({
            type?: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | undefined;
            name?: string | string[] | undefined;
            prop?: never[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        })[] | ({
            type?: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | undefined;
            name?: string | string[] | undefined;
            prop?: never[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        });
        run: (diffInfo: {
            itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
            itemsChanged: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            propsChanged: {
                global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                    all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
                };
                places: Record<string, "testState"[]> & {
                    all__: "testState"[];
                };
                dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                    all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
                };
                models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                    all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
                };
                story: Record<"main", (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                    all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
                };
                miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                    all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
                };
                characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                    all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
                };
                players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                    all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
                };
                speechBubbles: Record<string, (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                    all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
                };
                sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                    all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
                };
            } & {
                all__: (string | number | symbol)[];
            };
            itemsAdded: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemsRemoved: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
            itemsChangedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            propsChangedBool: {
                global: Record<"main", {
                    nowPlaceName: boolean;
                    nowCamName: boolean;
                    slatePosGoal: boolean;
                    slatePos: boolean;
                    focusedDoll: boolean;
                    slateZoom: boolean;
                    slateZoomGoal: boolean;
                    focusedDollIsInView: boolean;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: boolean;
                    slatePosMoveConfigName: boolean;
                    slatePosMoveConfigs: boolean;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: boolean;
                    slateZoomMoveConfigName: boolean;
                    slateZoomMoveConfigs: boolean;
                    playerCharacter: boolean;
                    playerMovingPaused: boolean;
                    heldPickups: boolean;
                    nowSegmentName: boolean;
                    aConvoIsHappening: boolean;
                    isLoadingBetweenPlaces: boolean;
                    storyOverlayToggled: boolean;
                    goalCamName: boolean;
                    goalSegmentNameAtLoop: boolean;
                    goalCamNameAtLoop: boolean;
                    alarmText: boolean;
                    alarmTextIsVisible: boolean;
                    interactButtonPressTime: boolean;
                    modelNamesLoaded: boolean;
                    goalSegmentNameWhenVidPlays: boolean;
                    goalCamNameWhenVidPlays: boolean;
                    timeScreenResized: boolean;
                    goalSegmentName: boolean;
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    loadingOverlayFullyShowing: boolean;
                    frameTick: boolean;
                    loadingOverlayToggled: boolean;
                    goalPlaceName: boolean;
                    readyToSwapPlace: boolean;
                    goalSegmentWhenGoalPlaceLoads: boolean;
                    goalCamWhenNextPlaceLoads: boolean;
                    aSpeechBubbleIsShowing: boolean;
                    gravityValue: boolean;
                    debugMessage: boolean;
                }> & {
                    all__: {
                        nowPlaceName: boolean;
                        nowCamName: boolean;
                        slatePosGoal: boolean;
                        slatePos: boolean;
                        focusedDoll: boolean;
                        slateZoom: boolean;
                        slateZoomGoal: boolean;
                        focusedDollIsInView: boolean;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: boolean;
                        slatePosMoveConfigName: boolean;
                        slatePosMoveConfigs: boolean;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: boolean;
                        slateZoomMoveConfigName: boolean;
                        slateZoomMoveConfigs: boolean;
                        playerCharacter: boolean;
                        playerMovingPaused: boolean;
                        heldPickups: boolean;
                        nowSegmentName: boolean;
                        aConvoIsHappening: boolean;
                        isLoadingBetweenPlaces: boolean;
                        storyOverlayToggled: boolean;
                        goalCamName: boolean;
                        goalSegmentNameAtLoop: boolean;
                        goalCamNameAtLoop: boolean;
                        alarmText: boolean;
                        alarmTextIsVisible: boolean;
                        interactButtonPressTime: boolean;
                        modelNamesLoaded: boolean;
                        goalSegmentNameWhenVidPlays: boolean;
                        goalCamNameWhenVidPlays: boolean;
                        timeScreenResized: boolean;
                        goalSegmentName: boolean;
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        loadingOverlayFullyShowing: boolean;
                        frameTick: boolean;
                        loadingOverlayToggled: boolean;
                        goalPlaceName: boolean;
                        readyToSwapPlace: boolean;
                        goalSegmentWhenGoalPlaceLoads: boolean;
                        goalCamWhenNextPlaceLoads: boolean;
                        aSpeechBubbleIsShowing: boolean;
                        gravityValue: boolean;
                        debugMessage: boolean;
                    };
                };
                places: Record<string, {
                    testState: boolean;
                }> & {
                    all__: {
                        testState: boolean;
                    };
                };
                dolls: Record<string, {
                    modelName: boolean;
                    position: boolean;
                    animWeightsGoal: boolean;
                    nowAnimation: boolean;
                    positionOnScreen: boolean;
                    positionGoal: boolean;
                    positionIsMoving: boolean;
                    positionMoveMode: boolean;
                    positionMoveConfigName: boolean;
                    positionMoveConfigs: boolean;
                    rotationY: boolean;
                    rotationYGoal: boolean;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: boolean;
                    rotationYMoveConfigName: boolean;
                    rotationYMoveConfigs: boolean;
                    animWeights: boolean;
                    animWeightsMoveConfigName: boolean;
                    animWeightsMoveConfigs: boolean;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: boolean;
                    inRange: boolean;
                    goalSpotName: boolean;
                    animationLoops: boolean;
                }> & {
                    all__: {
                        modelName: boolean;
                        position: boolean;
                        animWeightsGoal: boolean;
                        nowAnimation: boolean;
                        positionOnScreen: boolean;
                        positionGoal: boolean;
                        positionIsMoving: boolean;
                        positionMoveMode: boolean;
                        positionMoveConfigName: boolean;
                        positionMoveConfigs: boolean;
                        rotationY: boolean;
                        rotationYGoal: boolean;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: boolean;
                        rotationYMoveConfigName: boolean;
                        rotationYMoveConfigs: boolean;
                        animWeights: boolean;
                        animWeightsMoveConfigName: boolean;
                        animWeightsMoveConfigs: boolean;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: boolean;
                        inRange: boolean;
                        goalSpotName: boolean;
                        animationLoops: boolean;
                    };
                };
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoaded: boolean;
                    isLoading: boolean;
                }> & {
                    all__: {
                        wantToLoad: boolean;
                        isLoaded: boolean;
                        isLoading: boolean;
                    };
                };
                story: Record<"main", {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                keyboards: Record<"main", {
                    ArrowDown: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    KeyE: boolean;
                    Enter: boolean;
                    Space: boolean;
                    KeyM: boolean;
                    KeyQ: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    KeyZ: boolean;
                }> & {
                    all__: {
                        ArrowDown: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        KeyE: boolean;
                        Enter: boolean;
                        Space: boolean;
                        KeyM: boolean;
                        KeyQ: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        KeyZ: boolean;
                    };
                };
                miniBubbles: Record<string, {
                    position: boolean;
                    isVisible: boolean;
                    text: boolean;
                    forCharacter: boolean;
                    isFullyHidden: boolean;
                }> & {
                    all__: {
                        position: boolean;
                        isVisible: boolean;
                        text: boolean;
                        forCharacter: boolean;
                        isFullyHidden: boolean;
                    };
                };
                characters: Record<string, {
                    dollName: boolean;
                    atTriggers: boolean;
                    hasLeftFirstTrigger: boolean;
                    atCamCubes: boolean;
                }> & {
                    all__: {
                        dollName: boolean;
                        atTriggers: boolean;
                        hasLeftFirstTrigger: boolean;
                        atCamCubes: boolean;
                    };
                };
                players: Record<"main", {
                    animationNames: boolean;
                    interactButtonPressTime: boolean;
                    canShowVirtualButtons: boolean;
                    virtualControlsPressTime: boolean;
                    virtualControlsReleaseTime: boolean;
                    jumpButtonPressTime: boolean;
                    jumpButtonReleaseTime: boolean;
                    inputVelocity: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    isJumping: boolean;
                    lastSafeInputAngle: boolean;
                    pickupButtonPressTime: boolean;
                }> & {
                    all__: {
                        animationNames: boolean;
                        interactButtonPressTime: boolean;
                        canShowVirtualButtons: boolean;
                        virtualControlsPressTime: boolean;
                        virtualControlsReleaseTime: boolean;
                        jumpButtonPressTime: boolean;
                        jumpButtonReleaseTime: boolean;
                        inputVelocity: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        isJumping: boolean;
                        lastSafeInputAngle: boolean;
                        pickupButtonPressTime: boolean;
                    };
                };
                speechBubbles: Record<string, {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                stateVids: Record<string, {
                    autoplay: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    vidState: boolean;
                    goalSeekTime: boolean;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    playType: boolean;
                    videoSource: boolean;
                }> & {
                    all__: {
                        autoplay: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        vidState: boolean;
                        goalSeekTime: boolean;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        playType: boolean;
                        videoSource: boolean;
                    };
                };
                sliceVids: Record<string, {
                    stateVidId_playing: boolean;
                    sliceVidState: boolean;
                    nowSlice: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    newPlayingVidStartedTime: boolean;
                    goalSlice: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    stateVidId_waiting: boolean;
                    nowSliceSeekedTime: boolean;
                }> & {
                    all__: {
                        stateVidId_playing: boolean;
                        sliceVidState: boolean;
                        nowSlice: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        newPlayingVidStartedTime: boolean;
                        goalSlice: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        stateVidId_waiting: boolean;
                        nowSliceSeekedTime: boolean;
                    };
                };
            } & {
                all__: {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                };
            };
            itemsAddedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            itemsRemovedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
        }, frameDuration: number) => void;
        atStepEnd?: boolean | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        _isPerItem?: false | undefined;
    })>>(rulesToAdd: K_RulesToAdd) => {
        start: (ruleName: K_RuleName) => void;
        stop: (ruleName: K_RuleName) => void;
        startAll: () => void;
        stopAll: () => void;
        ruleNames: K_RuleName[];
    };
    makeDynamicRules: <K_RuleName_1 extends string, T_MakeRule_Function extends (...args: any) => ({} & {
        check: {
            prop?: undefined;
            type: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids";
            name?: string | string[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        } | {
            prop?: never[] | undefined;
            type: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids";
            name?: string | string[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        };
        run: (loopedInfo: {
            itemName: string;
            newValue: never;
            previousValue: never;
            itemState: unknown;
            itemRefs: unknown;
            frameDuration: number;
        }) => void;
        atStepEnd?: boolean | undefined;
        name?: string | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        _isPerItem?: true | undefined;
    }) | ({} & {
        name?: string | undefined;
        check: ({
            type?: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | undefined;
            name?: string | string[] | undefined;
            prop?: never[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        })[] | ({
            type?: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | undefined;
            name?: string | string[] | undefined;
            prop?: never[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        });
        run: (diffInfo: {
            itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
            itemsChanged: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            propsChanged: {
                global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                    all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
                };
                places: Record<string, "testState"[]> & {
                    all__: "testState"[];
                };
                dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                    all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
                };
                models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                    all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
                };
                story: Record<"main", (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                    all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
                };
                miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                    all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
                };
                characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                    all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
                };
                players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                    all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
                };
                speechBubbles: Record<string, (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                    all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
                };
                sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                    all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
                };
            } & {
                all__: (string | number | symbol)[];
            };
            itemsAdded: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemsRemoved: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
            itemsChangedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            propsChangedBool: {
                global: Record<"main", {
                    nowPlaceName: boolean;
                    nowCamName: boolean;
                    slatePosGoal: boolean;
                    slatePos: boolean;
                    focusedDoll: boolean;
                    slateZoom: boolean;
                    slateZoomGoal: boolean;
                    focusedDollIsInView: boolean;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: boolean;
                    slatePosMoveConfigName: boolean;
                    slatePosMoveConfigs: boolean;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: boolean;
                    slateZoomMoveConfigName: boolean;
                    slateZoomMoveConfigs: boolean;
                    playerCharacter: boolean;
                    playerMovingPaused: boolean;
                    heldPickups: boolean;
                    nowSegmentName: boolean;
                    aConvoIsHappening: boolean;
                    isLoadingBetweenPlaces: boolean;
                    storyOverlayToggled: boolean;
                    goalCamName: boolean;
                    goalSegmentNameAtLoop: boolean;
                    goalCamNameAtLoop: boolean;
                    alarmText: boolean;
                    alarmTextIsVisible: boolean;
                    interactButtonPressTime: boolean;
                    modelNamesLoaded: boolean;
                    goalSegmentNameWhenVidPlays: boolean;
                    goalCamNameWhenVidPlays: boolean;
                    timeScreenResized: boolean;
                    goalSegmentName: boolean;
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    loadingOverlayFullyShowing: boolean;
                    frameTick: boolean;
                    loadingOverlayToggled: boolean;
                    goalPlaceName: boolean;
                    readyToSwapPlace: boolean;
                    goalSegmentWhenGoalPlaceLoads: boolean;
                    goalCamWhenNextPlaceLoads: boolean;
                    aSpeechBubbleIsShowing: boolean;
                    gravityValue: boolean;
                    debugMessage: boolean;
                }> & {
                    all__: {
                        nowPlaceName: boolean;
                        nowCamName: boolean;
                        slatePosGoal: boolean;
                        slatePos: boolean;
                        focusedDoll: boolean;
                        slateZoom: boolean;
                        slateZoomGoal: boolean;
                        focusedDollIsInView: boolean;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: boolean;
                        slatePosMoveConfigName: boolean;
                        slatePosMoveConfigs: boolean;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: boolean;
                        slateZoomMoveConfigName: boolean;
                        slateZoomMoveConfigs: boolean;
                        playerCharacter: boolean;
                        playerMovingPaused: boolean;
                        heldPickups: boolean;
                        nowSegmentName: boolean;
                        aConvoIsHappening: boolean;
                        isLoadingBetweenPlaces: boolean;
                        storyOverlayToggled: boolean;
                        goalCamName: boolean;
                        goalSegmentNameAtLoop: boolean;
                        goalCamNameAtLoop: boolean;
                        alarmText: boolean;
                        alarmTextIsVisible: boolean;
                        interactButtonPressTime: boolean;
                        modelNamesLoaded: boolean;
                        goalSegmentNameWhenVidPlays: boolean;
                        goalCamNameWhenVidPlays: boolean;
                        timeScreenResized: boolean;
                        goalSegmentName: boolean;
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        loadingOverlayFullyShowing: boolean;
                        frameTick: boolean;
                        loadingOverlayToggled: boolean;
                        goalPlaceName: boolean;
                        readyToSwapPlace: boolean;
                        goalSegmentWhenGoalPlaceLoads: boolean;
                        goalCamWhenNextPlaceLoads: boolean;
                        aSpeechBubbleIsShowing: boolean;
                        gravityValue: boolean;
                        debugMessage: boolean;
                    };
                };
                places: Record<string, {
                    testState: boolean;
                }> & {
                    all__: {
                        testState: boolean;
                    };
                };
                dolls: Record<string, {
                    modelName: boolean;
                    position: boolean;
                    animWeightsGoal: boolean;
                    nowAnimation: boolean;
                    positionOnScreen: boolean;
                    positionGoal: boolean;
                    positionIsMoving: boolean;
                    positionMoveMode: boolean;
                    positionMoveConfigName: boolean;
                    positionMoveConfigs: boolean;
                    rotationY: boolean;
                    rotationYGoal: boolean;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: boolean;
                    rotationYMoveConfigName: boolean;
                    rotationYMoveConfigs: boolean;
                    animWeights: boolean;
                    animWeightsMoveConfigName: boolean;
                    animWeightsMoveConfigs: boolean;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: boolean;
                    inRange: boolean;
                    goalSpotName: boolean;
                    animationLoops: boolean;
                }> & {
                    all__: {
                        modelName: boolean;
                        position: boolean;
                        animWeightsGoal: boolean;
                        nowAnimation: boolean;
                        positionOnScreen: boolean;
                        positionGoal: boolean;
                        positionIsMoving: boolean;
                        positionMoveMode: boolean;
                        positionMoveConfigName: boolean;
                        positionMoveConfigs: boolean;
                        rotationY: boolean;
                        rotationYGoal: boolean;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: boolean;
                        rotationYMoveConfigName: boolean;
                        rotationYMoveConfigs: boolean;
                        animWeights: boolean;
                        animWeightsMoveConfigName: boolean;
                        animWeightsMoveConfigs: boolean;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: boolean;
                        inRange: boolean;
                        goalSpotName: boolean;
                        animationLoops: boolean;
                    };
                };
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoaded: boolean;
                    isLoading: boolean;
                }> & {
                    all__: {
                        wantToLoad: boolean;
                        isLoaded: boolean;
                        isLoading: boolean;
                    };
                };
                story: Record<"main", {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                keyboards: Record<"main", {
                    ArrowDown: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    KeyE: boolean;
                    Enter: boolean;
                    Space: boolean;
                    KeyM: boolean;
                    KeyQ: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    KeyZ: boolean;
                }> & {
                    all__: {
                        ArrowDown: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        KeyE: boolean;
                        Enter: boolean;
                        Space: boolean;
                        KeyM: boolean;
                        KeyQ: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        KeyZ: boolean;
                    };
                };
                miniBubbles: Record<string, {
                    position: boolean;
                    isVisible: boolean;
                    text: boolean;
                    forCharacter: boolean;
                    isFullyHidden: boolean;
                }> & {
                    all__: {
                        position: boolean;
                        isVisible: boolean;
                        text: boolean;
                        forCharacter: boolean;
                        isFullyHidden: boolean;
                    };
                };
                characters: Record<string, {
                    dollName: boolean;
                    atTriggers: boolean;
                    hasLeftFirstTrigger: boolean;
                    atCamCubes: boolean;
                }> & {
                    all__: {
                        dollName: boolean;
                        atTriggers: boolean;
                        hasLeftFirstTrigger: boolean;
                        atCamCubes: boolean;
                    };
                };
                players: Record<"main", {
                    animationNames: boolean;
                    interactButtonPressTime: boolean;
                    canShowVirtualButtons: boolean;
                    virtualControlsPressTime: boolean;
                    virtualControlsReleaseTime: boolean;
                    jumpButtonPressTime: boolean;
                    jumpButtonReleaseTime: boolean;
                    inputVelocity: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    isJumping: boolean;
                    lastSafeInputAngle: boolean;
                    pickupButtonPressTime: boolean;
                }> & {
                    all__: {
                        animationNames: boolean;
                        interactButtonPressTime: boolean;
                        canShowVirtualButtons: boolean;
                        virtualControlsPressTime: boolean;
                        virtualControlsReleaseTime: boolean;
                        jumpButtonPressTime: boolean;
                        jumpButtonReleaseTime: boolean;
                        inputVelocity: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        isJumping: boolean;
                        lastSafeInputAngle: boolean;
                        pickupButtonPressTime: boolean;
                    };
                };
                speechBubbles: Record<string, {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                stateVids: Record<string, {
                    autoplay: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    vidState: boolean;
                    goalSeekTime: boolean;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    playType: boolean;
                    videoSource: boolean;
                }> & {
                    all__: {
                        autoplay: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        vidState: boolean;
                        goalSeekTime: boolean;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        playType: boolean;
                        videoSource: boolean;
                    };
                };
                sliceVids: Record<string, {
                    stateVidId_playing: boolean;
                    sliceVidState: boolean;
                    nowSlice: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    newPlayingVidStartedTime: boolean;
                    goalSlice: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    stateVidId_waiting: boolean;
                    nowSliceSeekedTime: boolean;
                }> & {
                    all__: {
                        stateVidId_playing: boolean;
                        sliceVidState: boolean;
                        nowSlice: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        newPlayingVidStartedTime: boolean;
                        goalSlice: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        stateVidId_waiting: boolean;
                        nowSliceSeekedTime: boolean;
                    };
                };
            } & {
                all__: {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                };
            };
            itemsAddedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            itemsRemovedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
        }, frameDuration: number) => void;
        atStepEnd?: boolean | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        _isPerItem?: false | undefined;
    }), T_RulesToAdd = Record<K_RuleName_1, T_MakeRule_Function>>(rulesToAdd: (arg0: {
        itemEffect: <K_Type_5 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", K_PropertyName_1 extends import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_5][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_5]>>]>, T_Options extends unknown>(theRule: (options: T_Options) => {
            check: {
                prop?: K_PropertyName_1 | undefined;
                type: K_Type_5;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>[] | undefined;
                becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
                addedOrRemoved?: undefined;
            } | {
                prop?: K_PropertyName_1[] | undefined;
                type: K_Type_5;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>[] | undefined;
                becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
                addedOrRemoved?: undefined;
            };
            run: (loopedInfo: {
                itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>;
                newValue: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>][K_PropertyName_1];
                previousValue: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>][K_PropertyName_1];
                itemState: {
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>];
                itemRefs: {
                    global: Record<"main", {
                        sounds: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        music: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        musicEffects: {
                            lowPass: BiquadFilterNode | null;
                            compress: DynamicsCompressorNode | null;
                            extraGain: GainNode | null;
                        };
                        solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                        timerSpeed: number;
                        aConvoIsHappening_timeout: NodeJS.Timeout | null;
                        camSegmentRulesOptions: Partial<{
                            [x: string]: Partial<{
                                [x: string]: (usefulStuff: Record<any, any>) => string;
                            }>;
                        }> | null;
                        onPickupButtonClick: ((pickupName: any) => void) | null;
                        slateZoomMoverRefs: {
                            velocity: number;
                            recentSpeeds: number[];
                            stateNames: {
                                value: "slateZoom";
                                valueGoal: "slateZoomGoal";
                                isMoving: "slateZoomIsMoving";
                                moveMode: "slateZoomMoveMode";
                                physicsConfigName: "slateZoomMoveConfigName";
                                physicsConfigs: "slateZoomMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        slatePosMoverRefs: {
                            velocity: import("chootils/dist/points2d").Point2D;
                            recentSpeeds: number[];
                            averageSpeed: number;
                            canRunOnSlow: boolean;
                            stateNames: {
                                value: "slatePos";
                                valueGoal: "slatePosGoal";
                                isMoving: "slatePosIsMoving";
                                moveMode: "slatePosMoveMode";
                                physicsConfigName: "slatePosMoveConfigName";
                                physicsConfigs: "slatePosMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        scene: import("@babylonjs/core").Scene | null;
                        backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                        depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                        depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                        backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                        backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                        fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                        backdropSize: {
                            width: number;
                            height: number;
                        };
                        stretchVideoSize: {
                            x: number;
                            y: number;
                        };
                        stretchVideoGoalSize: {
                            x: number;
                            y: number;
                        };
                        stretchSceneSize: {
                            x: number;
                            y: number;
                        };
                    }>;
                    places: Record<string, {
                        rootMesh: import("@babylonjs/core").AbstractMesh | null;
                        spotPositions: {
                            [x: string]: import("@babylonjs/core").Vector3;
                        };
                        spotRotations: {
                            [x: string]: import("@babylonjs/core").Vector3;
                        };
                        soundspotSounds: {
                            [x: string]: import("@babylonjs/core").Sound | null;
                        };
                        triggerMeshes: {
                            [x: string]: import("@babylonjs/core").AbstractMesh | null;
                        };
                        wallMeshes: {
                            [x: string]: import("@babylonjs/core").AbstractMesh | null;
                        };
                        camsRefs: {
                            [x: string]: {
                                camera: import("@babylonjs/core").TargetCamera | null;
                                camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                                probeTexture: import("@babylonjs/core").CubeTexture | null;
                                isTriggerable: boolean;
                            };
                        };
                    }>;
                    dolls: Record<string | number, {
                        animWeightsMoverRefs: {
                            stateNames: {
                                value: "animWeights";
                                valueGoal: "animWeightsGoal";
                                isMoving: "animWeightsIsMoving";
                                moveMode: "animWeightsMoveMode";
                                physicsConfigName: "animWeightsMoveConfigName";
                                physicsConfigs: "animWeightsMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                            animRefs: Record<string, {
                                velocity: number;
                                recentSpeeds: number[];
                            }>;
                            animNames: readonly string[];
                        };
                        rotationYMoverRefs: {
                            velocity: number;
                            recentSpeeds: number[];
                            stateNames: {
                                value: "rotationY";
                                valueGoal: "rotationYGoal";
                                isMoving: "rotationYIsMoving";
                                moveMode: "rotationYMoveMode";
                                physicsConfigName: "rotationYMoveConfigName";
                                physicsConfigs: "rotationYMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        positionMoverRefs: {
                            velocity: import("chootils/dist/points3d").Point3D;
                            recentSpeeds: number[];
                            averageSpeed: number;
                            canRunOnSlow: boolean;
                            stateNames: {
                                value: "position";
                                valueGoal: "positionGoal";
                                isMoving: "positionIsMoving";
                                moveMode: "positionMoveMode";
                                physicsConfigName: "positionMoveConfigName";
                                physicsConfigs: "positionMoveConfigs";
                            };
                            physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        };
                        meshRef: import("@babylonjs/core").AbstractMesh | null;
                        otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                        entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                        aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                        assetRefs: {
                            meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                            skeleton: import("@babylonjs/core").Skeleton;
                            bones: Record<string, import("@babylonjs/core").Bone>;
                            aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                            materials: Record<string, import("@babylonjs/core").Material>;
                        } | null;
                        groundRef: import("@babylonjs/core").AbstractMesh | null;
                        checkCollisions: boolean;
                    }>;
                    models: Record<string, {
                        container: import("@babylonjs/core").AssetContainer | null;
                        materialRef: import("@babylonjs/core").PBRMaterial | null;
                        materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
                    }>;
                    story: Record<"main", Record<string, any>>;
                    keyboards: Record<"main", {}>;
                    miniBubbles: Record<string | number, {
                        bubbleRef: any;
                        textRef: any;
                        videoRef: HTMLVideoElement | null;
                    }>;
                    characters: Record<string | number, {
                        testRef: null;
                    }>;
                    players: Record<"main", {
                        walkSpeed: number;
                        canJumpTimeout: NodeJS.Timeout | null;
                        canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                        canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        videoElement: HTMLVideoElement | null;
                    }>;
                    sliceVids: Record<string, {
                        waitingForPlayToDoLoopRuleName: string | null;
                    }>;
                }[K_Type_5][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_5]>>];
                frameDuration: number;
            }) => void;
            atStepEnd?: boolean | undefined;
            name?: string | undefined;
            step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        }) => (options: T_Options) => any;
        effect: <K_Type_6 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", T_Options_1 extends unknown>(theRule: (options: T_Options_1) => {
            name?: string | undefined;
            check: ({
                type?: K_Type_6 | undefined;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>>[] | undefined;
                prop?: import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>>]>[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            } | {
                type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
                name?: string | string[] | undefined;
                prop?: (string | number | symbol)[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            })[] | ({
                type?: K_Type_6 | undefined;
                name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>>[] | undefined;
                prop?: import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                    global: Record<"main", {
                        slatePosMoveConfigName: string;
                        timeScreenResized: number;
                        interactButtonPressTime: number;
                        heldPickups: string[];
                        storyOverlayToggled: boolean;
                        alarmTextIsVisible: boolean;
                        alarmText: string;
                        aSpeechBubbleIsShowing: boolean;
                        aConvoIsHappening: boolean;
                        frameTick: number;
                        debugMessage: string;
                        slateZoom: number;
                        slateZoomGoal: number;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                        slateZoomMoveConfigName: string;
                        slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        slatePos: import("chootils/dist/points2d").Point2D;
                        slatePosGoal: import("chootils/dist/points2d").Point2D;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                        slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        nowPlaceName: string;
                        goalPlaceName: string | null;
                        readyToSwapPlace: boolean;
                        isLoadingBetweenPlaces: boolean;
                        loadingOverlayToggled: boolean;
                        loadingOverlayFullyShowing: boolean;
                        goalCamWhenNextPlaceLoads: string | null;
                        goalCamNameWhenVidPlays: string | null;
                        goalCamNameAtLoop: string | null;
                        goalCamName: string | null;
                        nowCamName: string;
                        nowSegmentName: string;
                        goalSegmentName: string | null;
                        goalSegmentNameAtLoop: string | null;
                        goalSegmentNameWhenVidPlays: string | null;
                        goalSegmentWhenGoalPlaceLoads: string | null;
                        modelNamesLoaded: string[];
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        playerCharacter: string;
                        gravityValue: number;
                        playerMovingPaused: boolean;
                        focusedDoll: any;
                        focusedDollIsInView: boolean;
                    }>;
                    places: Record<string, {
                        testState: number;
                    }>;
                    dolls: Record<string | number, {
                        nowAnimation: string;
                        animationLoops: boolean;
                        inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                        animWeights: Record<string, number>;
                        animWeightsGoal: Record<string, number>;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                        animWeightsMoveConfigName: string;
                        animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        positionOnScreen: import("chootils/dist/points2d").Point2D;
                        rotationY: number;
                        rotationYGoal: number;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                        rotationYMoveConfigName: string;
                        rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        position: import("chootils/dist/points3d").Point3D;
                        positionGoal: import("chootils/dist/points3d").Point3D;
                        positionIsMoving: boolean;
                        positionMoveMode: import("repond-movers/dist/types").MoveMode;
                        positionMoveConfigName: string;
                        positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                        modelName: string;
                        goalSpotName: string | null;
                    }>;
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoading: boolean;
                        isLoaded: boolean;
                    }>;
                    story: Record<"main", any>;
                    keyboards: Record<"main", {
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        ArrowDown: boolean;
                        KeyQ: boolean;
                        KeyE: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        Space: boolean;
                        Enter: boolean;
                        KeyZ: boolean;
                        KeyM: boolean;
                    }>;
                    miniBubbles: Record<string | number, {
                        isVisible: boolean;
                        isFullyHidden: boolean;
                        text: string;
                        forCharacter: string | null;
                        position: import("chootils/dist/points2d").Point2D;
                    }>;
                    characters: Record<string | number, {
                        dollName: string;
                        atTriggers: Partial<Record<string, boolean>>;
                        atCamCubes: Partial<Record<string, boolean>>;
                        hasLeftFirstTrigger: boolean;
                    }>;
                    players: Record<"main", {
                        lastSafeInputAngle: number | null;
                        inputVelocity: import("chootils/dist/points2d").Point2D;
                        isJumping: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        interactButtonPressTime: number;
                        jumpButtonPressTime: number;
                        jumpButtonReleaseTime: number;
                        pickupButtonPressTime: number;
                        virtualControlsPressTime: number;
                        virtualControlsReleaseTime: number;
                        canShowVirtualButtons: boolean;
                        animationNames: {
                            walking: string;
                            idle: string;
                        };
                    }>;
                    speechBubbles: Record<string | number | symbol, any>;
                    stateVids: Record<string | number, {
                        vidState: import("./stateVids").VidState;
                        playType: "pause" | "play";
                        goalSeekTime: number | null;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        wantToUnload: boolean;
                        wantToLoad: boolean;
                        videoSource: string;
                        autoplay: boolean;
                    }>;
                    sliceVids: Record<string, {
                        stateVidId_playing: string | null;
                        stateVidId_waiting: string | null;
                        sliceVidState: import("./sliceVids").SliceVidState;
                        nowSlice: {
                            time: number;
                            duration: number;
                        };
                        goalSlice: import("./sliceVids").VidSlice | null;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        newPlayingVidStartedTime: number;
                        nowSliceSeekedTime: number;
                    }>;
                }[K_Type_6]>>]>[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            } | {
                type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
                name?: string | string[] | undefined;
                prop?: (string | number | symbol)[] | undefined;
                addedOrRemoved?: boolean | undefined;
                becomes?: undefined;
            });
            run: (diffInfo: {
                itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
                itemsChanged: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                propsChanged: {
                    global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                        all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
                    };
                    places: Record<string, "testState"[]> & {
                        all__: "testState"[];
                    };
                    dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                        all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
                    };
                    models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                        all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
                    };
                    story: Record<"main", (string | number | symbol)[]> & {
                        all__: (string | number | symbol)[];
                    };
                    keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                        all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
                    };
                    miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                        all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
                    };
                    characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                        all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
                    };
                    players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                        all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
                    };
                    speechBubbles: Record<string, (string | number | symbol)[]> & {
                        all__: (string | number | symbol)[];
                    };
                    stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                        all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
                    };
                    sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                        all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
                    };
                } & {
                    all__: (string | number | symbol)[];
                };
                itemsAdded: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                itemsRemoved: {
                    global: string[];
                    places: string[];
                    dolls: string[];
                    models: string[];
                    story: string[];
                    keyboards: string[];
                    miniBubbles: string[];
                    characters: string[];
                    players: string[];
                    speechBubbles: string[];
                    stateVids: string[];
                    sliceVids: string[];
                    all__: string[];
                };
                itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
                itemsChangedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
                propsChangedBool: {
                    global: Record<"main", {
                        nowPlaceName: boolean;
                        nowCamName: boolean;
                        slatePosGoal: boolean;
                        slatePos: boolean;
                        focusedDoll: boolean;
                        slateZoom: boolean;
                        slateZoomGoal: boolean;
                        focusedDollIsInView: boolean;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: boolean;
                        slatePosMoveConfigName: boolean;
                        slatePosMoveConfigs: boolean;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: boolean;
                        slateZoomMoveConfigName: boolean;
                        slateZoomMoveConfigs: boolean;
                        playerCharacter: boolean;
                        playerMovingPaused: boolean;
                        heldPickups: boolean;
                        nowSegmentName: boolean;
                        aConvoIsHappening: boolean;
                        isLoadingBetweenPlaces: boolean;
                        storyOverlayToggled: boolean;
                        goalCamName: boolean;
                        goalSegmentNameAtLoop: boolean;
                        goalCamNameAtLoop: boolean;
                        alarmText: boolean;
                        alarmTextIsVisible: boolean;
                        interactButtonPressTime: boolean;
                        modelNamesLoaded: boolean;
                        goalSegmentNameWhenVidPlays: boolean;
                        goalCamNameWhenVidPlays: boolean;
                        timeScreenResized: boolean;
                        goalSegmentName: boolean;
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        loadingOverlayFullyShowing: boolean;
                        frameTick: boolean;
                        loadingOverlayToggled: boolean;
                        goalPlaceName: boolean;
                        readyToSwapPlace: boolean;
                        goalSegmentWhenGoalPlaceLoads: boolean;
                        goalCamWhenNextPlaceLoads: boolean;
                        aSpeechBubbleIsShowing: boolean;
                        gravityValue: boolean;
                        debugMessage: boolean;
                    }> & {
                        all__: {
                            nowPlaceName: boolean;
                            nowCamName: boolean;
                            slatePosGoal: boolean;
                            slatePos: boolean;
                            focusedDoll: boolean;
                            slateZoom: boolean;
                            slateZoomGoal: boolean;
                            focusedDollIsInView: boolean;
                            slatePosIsMoving: boolean;
                            slatePosMoveMode: boolean;
                            slatePosMoveConfigName: boolean;
                            slatePosMoveConfigs: boolean;
                            slateZoomIsMoving: boolean;
                            slateZoomMoveMode: boolean;
                            slateZoomMoveConfigName: boolean;
                            slateZoomMoveConfigs: boolean;
                            playerCharacter: boolean;
                            playerMovingPaused: boolean;
                            heldPickups: boolean;
                            nowSegmentName: boolean;
                            aConvoIsHappening: boolean;
                            isLoadingBetweenPlaces: boolean;
                            storyOverlayToggled: boolean;
                            goalCamName: boolean;
                            goalSegmentNameAtLoop: boolean;
                            goalCamNameAtLoop: boolean;
                            alarmText: boolean;
                            alarmTextIsVisible: boolean;
                            interactButtonPressTime: boolean;
                            modelNamesLoaded: boolean;
                            goalSegmentNameWhenVidPlays: boolean;
                            goalCamNameWhenVidPlays: boolean;
                            timeScreenResized: boolean;
                            goalSegmentName: boolean;
                            newPlaceModelLoaded: boolean;
                            newPlaceVideosLoaded: boolean;
                            newPlaceProbesLoaded: boolean;
                            loadingOverlayFullyShowing: boolean;
                            frameTick: boolean;
                            loadingOverlayToggled: boolean;
                            goalPlaceName: boolean;
                            readyToSwapPlace: boolean;
                            goalSegmentWhenGoalPlaceLoads: boolean;
                            goalCamWhenNextPlaceLoads: boolean;
                            aSpeechBubbleIsShowing: boolean;
                            gravityValue: boolean;
                            debugMessage: boolean;
                        };
                    };
                    places: Record<string, {
                        testState: boolean;
                    }> & {
                        all__: {
                            testState: boolean;
                        };
                    };
                    dolls: Record<string, {
                        modelName: boolean;
                        position: boolean;
                        animWeightsGoal: boolean;
                        nowAnimation: boolean;
                        positionOnScreen: boolean;
                        positionGoal: boolean;
                        positionIsMoving: boolean;
                        positionMoveMode: boolean;
                        positionMoveConfigName: boolean;
                        positionMoveConfigs: boolean;
                        rotationY: boolean;
                        rotationYGoal: boolean;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: boolean;
                        rotationYMoveConfigName: boolean;
                        rotationYMoveConfigs: boolean;
                        animWeights: boolean;
                        animWeightsMoveConfigName: boolean;
                        animWeightsMoveConfigs: boolean;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: boolean;
                        inRange: boolean;
                        goalSpotName: boolean;
                        animationLoops: boolean;
                    }> & {
                        all__: {
                            modelName: boolean;
                            position: boolean;
                            animWeightsGoal: boolean;
                            nowAnimation: boolean;
                            positionOnScreen: boolean;
                            positionGoal: boolean;
                            positionIsMoving: boolean;
                            positionMoveMode: boolean;
                            positionMoveConfigName: boolean;
                            positionMoveConfigs: boolean;
                            rotationY: boolean;
                            rotationYGoal: boolean;
                            rotationYIsMoving: boolean;
                            rotationYMoveMode: boolean;
                            rotationYMoveConfigName: boolean;
                            rotationYMoveConfigs: boolean;
                            animWeights: boolean;
                            animWeightsMoveConfigName: boolean;
                            animWeightsMoveConfigs: boolean;
                            animWeightsIsMoving: boolean;
                            animWeightsMoveMode: boolean;
                            inRange: boolean;
                            goalSpotName: boolean;
                            animationLoops: boolean;
                        };
                    };
                    models: Record<string, {
                        wantToLoad: boolean;
                        isLoaded: boolean;
                        isLoading: boolean;
                    }> & {
                        all__: {
                            wantToLoad: boolean;
                            isLoaded: boolean;
                            isLoading: boolean;
                        };
                    };
                    story: Record<"main", {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    }> & {
                        all__: {
                            [x: string]: boolean;
                            [x: number]: boolean;
                            [x: symbol]: boolean;
                        };
                    };
                    keyboards: Record<"main", {
                        ArrowDown: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        KeyE: boolean;
                        Enter: boolean;
                        Space: boolean;
                        KeyM: boolean;
                        KeyQ: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        KeyZ: boolean;
                    }> & {
                        all__: {
                            ArrowDown: boolean;
                            ArrowLeft: boolean;
                            ArrowRight: boolean;
                            ArrowUp: boolean;
                            KeyW: boolean;
                            KeyA: boolean;
                            KeyS: boolean;
                            KeyD: boolean;
                            KeyE: boolean;
                            Enter: boolean;
                            Space: boolean;
                            KeyM: boolean;
                            KeyQ: boolean;
                            ShiftLeft: boolean;
                            ControlLeft: boolean;
                            KeyZ: boolean;
                        };
                    };
                    miniBubbles: Record<string, {
                        position: boolean;
                        isVisible: boolean;
                        text: boolean;
                        forCharacter: boolean;
                        isFullyHidden: boolean;
                    }> & {
                        all__: {
                            position: boolean;
                            isVisible: boolean;
                            text: boolean;
                            forCharacter: boolean;
                            isFullyHidden: boolean;
                        };
                    };
                    characters: Record<string, {
                        dollName: boolean;
                        atTriggers: boolean;
                        hasLeftFirstTrigger: boolean;
                        atCamCubes: boolean;
                    }> & {
                        all__: {
                            dollName: boolean;
                            atTriggers: boolean;
                            hasLeftFirstTrigger: boolean;
                            atCamCubes: boolean;
                        };
                    };
                    players: Record<"main", {
                        animationNames: boolean;
                        interactButtonPressTime: boolean;
                        canShowVirtualButtons: boolean;
                        virtualControlsPressTime: boolean;
                        virtualControlsReleaseTime: boolean;
                        jumpButtonPressTime: boolean;
                        jumpButtonReleaseTime: boolean;
                        inputVelocity: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        isJumping: boolean;
                        lastSafeInputAngle: boolean;
                        pickupButtonPressTime: boolean;
                    }> & {
                        all__: {
                            animationNames: boolean;
                            interactButtonPressTime: boolean;
                            canShowVirtualButtons: boolean;
                            virtualControlsPressTime: boolean;
                            virtualControlsReleaseTime: boolean;
                            jumpButtonPressTime: boolean;
                            jumpButtonReleaseTime: boolean;
                            inputVelocity: boolean;
                            isOnGround: boolean;
                            canJump: boolean;
                            isJumping: boolean;
                            lastSafeInputAngle: boolean;
                            pickupButtonPressTime: boolean;
                        };
                    };
                    speechBubbles: Record<string, {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    }> & {
                        all__: {
                            [x: string]: boolean;
                            [x: number]: boolean;
                            [x: symbol]: boolean;
                        };
                    };
                    stateVids: Record<string, {
                        autoplay: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        vidState: boolean;
                        goalSeekTime: boolean;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        playType: boolean;
                        videoSource: boolean;
                    }> & {
                        all__: {
                            autoplay: boolean;
                            wantToLoad: boolean;
                            wantToUnload: boolean;
                            vidState: boolean;
                            goalSeekTime: boolean;
                            wantToPlay: boolean;
                            wantToPause: boolean;
                            playType: boolean;
                            videoSource: boolean;
                        };
                    };
                    sliceVids: Record<string, {
                        stateVidId_playing: boolean;
                        sliceVidState: boolean;
                        nowSlice: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        newPlayingVidStartedTime: boolean;
                        goalSlice: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        stateVidId_waiting: boolean;
                        nowSliceSeekedTime: boolean;
                    }> & {
                        all__: {
                            stateVidId_playing: boolean;
                            sliceVidState: boolean;
                            nowSlice: boolean;
                            wantToLoad: boolean;
                            wantToUnload: boolean;
                            newPlayingVidStartedTime: boolean;
                            goalSlice: boolean;
                            wantToLoop: boolean;
                            switchSlice_keepProgress: boolean;
                            stateVidId_waiting: boolean;
                            nowSliceSeekedTime: boolean;
                        };
                    };
                } & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                itemsAddedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
                itemsRemovedBool: {
                    global: Record<string, boolean>;
                    places: Record<string, boolean>;
                    dolls: Record<string, boolean>;
                    models: Record<string, boolean>;
                    story: Record<string, boolean>;
                    keyboards: Record<string, boolean>;
                    miniBubbles: Record<string, boolean>;
                    characters: Record<string, boolean>;
                    players: Record<string, boolean>;
                    speechBubbles: Record<string, boolean>;
                    stateVids: Record<string, boolean>;
                    sliceVids: Record<string, boolean>;
                    all__: Record<string, boolean>;
                };
            }, frameDuration: number) => void;
            atStepEnd?: boolean | undefined;
            step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
        }) => (options: T_Options_1) => any;
    }) => T_RulesToAdd) => {
        start: <K_ChosenRuleName extends keyof T_RulesToAdd & K_RuleName_1>(ruleName: K_ChosenRuleName, options: Parameters<T_RulesToAdd[K_ChosenRuleName]>[0]) => void;
        stop: <K_ChosenRuleName_1 extends keyof T_RulesToAdd & K_RuleName_1>(ruleName: K_ChosenRuleName_1, options: Parameters<T_RulesToAdd[K_ChosenRuleName_1]>[0]) => void;
        ruleNames: (keyof T_RulesToAdd)[];
        startAll: (options: Parameters<T_RulesToAdd[keyof T_RulesToAdd]>[0]) => void;
        stopAll: (options: Parameters<T_RulesToAdd[keyof T_RulesToAdd]>[0]) => void;
    };
    startEffect: <K_Type_7 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids">(theEffect: {
        name?: string | undefined;
        check: ({
            type?: K_Type_7 | undefined;
            name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>>[] | undefined;
            prop?: import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>>]>[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        })[] | ({
            type?: K_Type_7 | undefined;
            name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>>[] | undefined;
            prop?: import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_7]>>]>[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        } | {
            type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
            name?: string | string[] | undefined;
            prop?: (string | number | symbol)[] | undefined;
            addedOrRemoved?: boolean | undefined;
            becomes?: undefined;
        });
        run: (diffInfo: {
            itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
            itemsChanged: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            propsChanged: {
                global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                    all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
                };
                places: Record<string, "testState"[]> & {
                    all__: "testState"[];
                };
                dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                    all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
                };
                models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                    all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
                };
                story: Record<"main", (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                    all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
                };
                miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                    all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
                };
                characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                    all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
                };
                players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                    all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
                };
                speechBubbles: Record<string, (string | number | symbol)[]> & {
                    all__: (string | number | symbol)[];
                };
                stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                    all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
                };
                sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                    all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
                };
            } & {
                all__: (string | number | symbol)[];
            };
            itemsAdded: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemsRemoved: {
                global: string[];
                places: string[];
                dolls: string[];
                models: string[];
                story: string[];
                keyboards: string[];
                miniBubbles: string[];
                characters: string[];
                players: string[];
                speechBubbles: string[];
                stateVids: string[];
                sliceVids: string[];
                all__: string[];
            };
            itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
            itemsChangedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            propsChangedBool: {
                global: Record<"main", {
                    nowPlaceName: boolean;
                    nowCamName: boolean;
                    slatePosGoal: boolean;
                    slatePos: boolean;
                    focusedDoll: boolean;
                    slateZoom: boolean;
                    slateZoomGoal: boolean;
                    focusedDollIsInView: boolean;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: boolean;
                    slatePosMoveConfigName: boolean;
                    slatePosMoveConfigs: boolean;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: boolean;
                    slateZoomMoveConfigName: boolean;
                    slateZoomMoveConfigs: boolean;
                    playerCharacter: boolean;
                    playerMovingPaused: boolean;
                    heldPickups: boolean;
                    nowSegmentName: boolean;
                    aConvoIsHappening: boolean;
                    isLoadingBetweenPlaces: boolean;
                    storyOverlayToggled: boolean;
                    goalCamName: boolean;
                    goalSegmentNameAtLoop: boolean;
                    goalCamNameAtLoop: boolean;
                    alarmText: boolean;
                    alarmTextIsVisible: boolean;
                    interactButtonPressTime: boolean;
                    modelNamesLoaded: boolean;
                    goalSegmentNameWhenVidPlays: boolean;
                    goalCamNameWhenVidPlays: boolean;
                    timeScreenResized: boolean;
                    goalSegmentName: boolean;
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    loadingOverlayFullyShowing: boolean;
                    frameTick: boolean;
                    loadingOverlayToggled: boolean;
                    goalPlaceName: boolean;
                    readyToSwapPlace: boolean;
                    goalSegmentWhenGoalPlaceLoads: boolean;
                    goalCamWhenNextPlaceLoads: boolean;
                    aSpeechBubbleIsShowing: boolean;
                    gravityValue: boolean;
                    debugMessage: boolean;
                }> & {
                    all__: {
                        nowPlaceName: boolean;
                        nowCamName: boolean;
                        slatePosGoal: boolean;
                        slatePos: boolean;
                        focusedDoll: boolean;
                        slateZoom: boolean;
                        slateZoomGoal: boolean;
                        focusedDollIsInView: boolean;
                        slatePosIsMoving: boolean;
                        slatePosMoveMode: boolean;
                        slatePosMoveConfigName: boolean;
                        slatePosMoveConfigs: boolean;
                        slateZoomIsMoving: boolean;
                        slateZoomMoveMode: boolean;
                        slateZoomMoveConfigName: boolean;
                        slateZoomMoveConfigs: boolean;
                        playerCharacter: boolean;
                        playerMovingPaused: boolean;
                        heldPickups: boolean;
                        nowSegmentName: boolean;
                        aConvoIsHappening: boolean;
                        isLoadingBetweenPlaces: boolean;
                        storyOverlayToggled: boolean;
                        goalCamName: boolean;
                        goalSegmentNameAtLoop: boolean;
                        goalCamNameAtLoop: boolean;
                        alarmText: boolean;
                        alarmTextIsVisible: boolean;
                        interactButtonPressTime: boolean;
                        modelNamesLoaded: boolean;
                        goalSegmentNameWhenVidPlays: boolean;
                        goalCamNameWhenVidPlays: boolean;
                        timeScreenResized: boolean;
                        goalSegmentName: boolean;
                        newPlaceModelLoaded: boolean;
                        newPlaceVideosLoaded: boolean;
                        newPlaceProbesLoaded: boolean;
                        loadingOverlayFullyShowing: boolean;
                        frameTick: boolean;
                        loadingOverlayToggled: boolean;
                        goalPlaceName: boolean;
                        readyToSwapPlace: boolean;
                        goalSegmentWhenGoalPlaceLoads: boolean;
                        goalCamWhenNextPlaceLoads: boolean;
                        aSpeechBubbleIsShowing: boolean;
                        gravityValue: boolean;
                        debugMessage: boolean;
                    };
                };
                places: Record<string, {
                    testState: boolean;
                }> & {
                    all__: {
                        testState: boolean;
                    };
                };
                dolls: Record<string, {
                    modelName: boolean;
                    position: boolean;
                    animWeightsGoal: boolean;
                    nowAnimation: boolean;
                    positionOnScreen: boolean;
                    positionGoal: boolean;
                    positionIsMoving: boolean;
                    positionMoveMode: boolean;
                    positionMoveConfigName: boolean;
                    positionMoveConfigs: boolean;
                    rotationY: boolean;
                    rotationYGoal: boolean;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: boolean;
                    rotationYMoveConfigName: boolean;
                    rotationYMoveConfigs: boolean;
                    animWeights: boolean;
                    animWeightsMoveConfigName: boolean;
                    animWeightsMoveConfigs: boolean;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: boolean;
                    inRange: boolean;
                    goalSpotName: boolean;
                    animationLoops: boolean;
                }> & {
                    all__: {
                        modelName: boolean;
                        position: boolean;
                        animWeightsGoal: boolean;
                        nowAnimation: boolean;
                        positionOnScreen: boolean;
                        positionGoal: boolean;
                        positionIsMoving: boolean;
                        positionMoveMode: boolean;
                        positionMoveConfigName: boolean;
                        positionMoveConfigs: boolean;
                        rotationY: boolean;
                        rotationYGoal: boolean;
                        rotationYIsMoving: boolean;
                        rotationYMoveMode: boolean;
                        rotationYMoveConfigName: boolean;
                        rotationYMoveConfigs: boolean;
                        animWeights: boolean;
                        animWeightsMoveConfigName: boolean;
                        animWeightsMoveConfigs: boolean;
                        animWeightsIsMoving: boolean;
                        animWeightsMoveMode: boolean;
                        inRange: boolean;
                        goalSpotName: boolean;
                        animationLoops: boolean;
                    };
                };
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoaded: boolean;
                    isLoading: boolean;
                }> & {
                    all__: {
                        wantToLoad: boolean;
                        isLoaded: boolean;
                        isLoading: boolean;
                    };
                };
                story: Record<"main", {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                keyboards: Record<"main", {
                    ArrowDown: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    KeyE: boolean;
                    Enter: boolean;
                    Space: boolean;
                    KeyM: boolean;
                    KeyQ: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    KeyZ: boolean;
                }> & {
                    all__: {
                        ArrowDown: boolean;
                        ArrowLeft: boolean;
                        ArrowRight: boolean;
                        ArrowUp: boolean;
                        KeyW: boolean;
                        KeyA: boolean;
                        KeyS: boolean;
                        KeyD: boolean;
                        KeyE: boolean;
                        Enter: boolean;
                        Space: boolean;
                        KeyM: boolean;
                        KeyQ: boolean;
                        ShiftLeft: boolean;
                        ControlLeft: boolean;
                        KeyZ: boolean;
                    };
                };
                miniBubbles: Record<string, {
                    position: boolean;
                    isVisible: boolean;
                    text: boolean;
                    forCharacter: boolean;
                    isFullyHidden: boolean;
                }> & {
                    all__: {
                        position: boolean;
                        isVisible: boolean;
                        text: boolean;
                        forCharacter: boolean;
                        isFullyHidden: boolean;
                    };
                };
                characters: Record<string, {
                    dollName: boolean;
                    atTriggers: boolean;
                    hasLeftFirstTrigger: boolean;
                    atCamCubes: boolean;
                }> & {
                    all__: {
                        dollName: boolean;
                        atTriggers: boolean;
                        hasLeftFirstTrigger: boolean;
                        atCamCubes: boolean;
                    };
                };
                players: Record<"main", {
                    animationNames: boolean;
                    interactButtonPressTime: boolean;
                    canShowVirtualButtons: boolean;
                    virtualControlsPressTime: boolean;
                    virtualControlsReleaseTime: boolean;
                    jumpButtonPressTime: boolean;
                    jumpButtonReleaseTime: boolean;
                    inputVelocity: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    isJumping: boolean;
                    lastSafeInputAngle: boolean;
                    pickupButtonPressTime: boolean;
                }> & {
                    all__: {
                        animationNames: boolean;
                        interactButtonPressTime: boolean;
                        canShowVirtualButtons: boolean;
                        virtualControlsPressTime: boolean;
                        virtualControlsReleaseTime: boolean;
                        jumpButtonPressTime: boolean;
                        jumpButtonReleaseTime: boolean;
                        inputVelocity: boolean;
                        isOnGround: boolean;
                        canJump: boolean;
                        isJumping: boolean;
                        lastSafeInputAngle: boolean;
                        pickupButtonPressTime: boolean;
                    };
                };
                speechBubbles: Record<string, {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                }> & {
                    all__: {
                        [x: string]: boolean;
                        [x: number]: boolean;
                        [x: symbol]: boolean;
                    };
                };
                stateVids: Record<string, {
                    autoplay: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    vidState: boolean;
                    goalSeekTime: boolean;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    playType: boolean;
                    videoSource: boolean;
                }> & {
                    all__: {
                        autoplay: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        vidState: boolean;
                        goalSeekTime: boolean;
                        wantToPlay: boolean;
                        wantToPause: boolean;
                        playType: boolean;
                        videoSource: boolean;
                    };
                };
                sliceVids: Record<string, {
                    stateVidId_playing: boolean;
                    sliceVidState: boolean;
                    nowSlice: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    newPlayingVidStartedTime: boolean;
                    goalSlice: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    stateVidId_waiting: boolean;
                    nowSliceSeekedTime: boolean;
                }> & {
                    all__: {
                        stateVidId_playing: boolean;
                        sliceVidState: boolean;
                        nowSlice: boolean;
                        wantToLoad: boolean;
                        wantToUnload: boolean;
                        newPlayingVidStartedTime: boolean;
                        goalSlice: boolean;
                        wantToLoop: boolean;
                        switchSlice_keepProgress: boolean;
                        stateVidId_waiting: boolean;
                        nowSliceSeekedTime: boolean;
                    };
                };
            } & {
                all__: {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                };
            };
            itemsAddedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
            itemsRemovedBool: {
                global: Record<string, boolean>;
                places: Record<string, boolean>;
                dolls: Record<string, boolean>;
                models: Record<string, boolean>;
                story: Record<string, boolean>;
                keyboards: Record<string, boolean>;
                miniBubbles: Record<string, boolean>;
                characters: Record<string, boolean>;
                players: Record<string, boolean>;
                speechBubbles: Record<string, boolean>;
                stateVids: Record<string, boolean>;
                sliceVids: Record<string, boolean>;
                all__: Record<string, boolean>;
            };
        }, frameDuration: number) => void;
        atStepEnd?: boolean | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
    }) => void;
    startItemEffect: <K_Type_8 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", K_PropertyName_2 extends import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_8][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_8]>>]>>({ check, run, atStepEnd, name, step, }: {
        check: {
            prop?: K_PropertyName_2 | undefined;
            type: K_Type_8;
            name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        } | {
            prop?: K_PropertyName_2[] | undefined;
            type: K_Type_8;
            name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>[] | undefined;
            becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
            addedOrRemoved?: undefined;
        };
        run: (loopedInfo: {
            itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>;
            newValue: {
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>][K_PropertyName_2];
            previousValue: {
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>][K_PropertyName_2];
            itemState: {
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>];
            itemRefs: {
                global: Record<"main", {
                    sounds: {
                        [x: string]: import("@babylonjs/core").Sound | null;
                    };
                    music: {
                        [x: string]: import("@babylonjs/core").Sound | null;
                    };
                    musicEffects: {
                        lowPass: BiquadFilterNode | null;
                        compress: DynamicsCompressorNode | null;
                        extraGain: GainNode | null;
                    };
                    solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                    timerSpeed: number;
                    aConvoIsHappening_timeout: NodeJS.Timeout | null;
                    camSegmentRulesOptions: Partial<{
                        [x: string]: Partial<{
                            [x: string]: (usefulStuff: Record<any, any>) => string;
                        }>;
                    }> | null;
                    onPickupButtonClick: ((pickupName: any) => void) | null;
                    slateZoomMoverRefs: {
                        velocity: number;
                        recentSpeeds: number[];
                        stateNames: {
                            value: "slateZoom";
                            valueGoal: "slateZoomGoal";
                            isMoving: "slateZoomIsMoving";
                            moveMode: "slateZoomMoveMode";
                            physicsConfigName: "slateZoomMoveConfigName";
                            physicsConfigs: "slateZoomMoveConfigs";
                        };
                        physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    };
                    slatePosMoverRefs: {
                        velocity: import("chootils/dist/points2d").Point2D;
                        recentSpeeds: number[];
                        averageSpeed: number;
                        canRunOnSlow: boolean;
                        stateNames: {
                            value: "slatePos";
                            valueGoal: "slatePosGoal";
                            isMoving: "slatePosIsMoving";
                            moveMode: "slatePosMoveMode";
                            physicsConfigName: "slatePosMoveConfigName";
                            physicsConfigs: "slatePosMoveConfigs";
                        };
                        physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    };
                    scene: import("@babylonjs/core").Scene | null;
                    backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                    depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                    depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                    backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                    backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                    fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                    backdropSize: {
                        width: number;
                        height: number;
                    };
                    stretchVideoSize: {
                        x: number;
                        y: number;
                    };
                    stretchVideoGoalSize: {
                        x: number;
                        y: number;
                    };
                    stretchSceneSize: {
                        x: number;
                        y: number;
                    };
                }>;
                places: Record<string, {
                    rootMesh: import("@babylonjs/core").AbstractMesh | null;
                    spotPositions: {
                        [x: string]: import("@babylonjs/core").Vector3;
                    };
                    spotRotations: {
                        [x: string]: import("@babylonjs/core").Vector3;
                    };
                    soundspotSounds: {
                        [x: string]: import("@babylonjs/core").Sound | null;
                    };
                    triggerMeshes: {
                        [x: string]: import("@babylonjs/core").AbstractMesh | null;
                    };
                    wallMeshes: {
                        [x: string]: import("@babylonjs/core").AbstractMesh | null;
                    };
                    camsRefs: {
                        [x: string]: {
                            camera: import("@babylonjs/core").TargetCamera | null;
                            camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                            probeTexture: import("@babylonjs/core").CubeTexture | null;
                            isTriggerable: boolean;
                        };
                    };
                }>;
                dolls: Record<string | number, {
                    animWeightsMoverRefs: {
                        stateNames: {
                            value: "animWeights";
                            valueGoal: "animWeightsGoal";
                            isMoving: "animWeightsIsMoving";
                            moveMode: "animWeightsMoveMode";
                            physicsConfigName: "animWeightsMoveConfigName";
                            physicsConfigs: "animWeightsMoveConfigs";
                        };
                        physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                        animRefs: Record<string, {
                            velocity: number;
                            recentSpeeds: number[];
                        }>;
                        animNames: readonly string[];
                    };
                    rotationYMoverRefs: {
                        velocity: number;
                        recentSpeeds: number[];
                        stateNames: {
                            value: "rotationY";
                            valueGoal: "rotationYGoal";
                            isMoving: "rotationYIsMoving";
                            moveMode: "rotationYMoveMode";
                            physicsConfigName: "rotationYMoveConfigName";
                            physicsConfigs: "rotationYMoveConfigs";
                        };
                        physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    };
                    positionMoverRefs: {
                        velocity: import("chootils/dist/points3d").Point3D;
                        recentSpeeds: number[];
                        averageSpeed: number;
                        canRunOnSlow: boolean;
                        stateNames: {
                            value: "position";
                            valueGoal: "positionGoal";
                            isMoving: "positionIsMoving";
                            moveMode: "positionMoveMode";
                            physicsConfigName: "positionMoveConfigName";
                            physicsConfigs: "positionMoveConfigs";
                        };
                        physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    };
                    meshRef: import("@babylonjs/core").AbstractMesh | null;
                    otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                    entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                    aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                    assetRefs: {
                        meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                        skeleton: import("@babylonjs/core").Skeleton;
                        bones: Record<string, import("@babylonjs/core").Bone>;
                        aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                        materials: Record<string, import("@babylonjs/core").Material>;
                    } | null;
                    groundRef: import("@babylonjs/core").AbstractMesh | null;
                    checkCollisions: boolean;
                }>;
                models: Record<string, {
                    container: import("@babylonjs/core").AssetContainer | null;
                    materialRef: import("@babylonjs/core").PBRMaterial | null;
                    materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
                }>;
                story: Record<"main", Record<string, any>>;
                keyboards: Record<"main", {}>;
                miniBubbles: Record<string | number, {
                    bubbleRef: any;
                    textRef: any;
                    videoRef: HTMLVideoElement | null;
                }>;
                characters: Record<string | number, {
                    testRef: null;
                }>;
                players: Record<"main", {
                    walkSpeed: number;
                    canJumpTimeout: NodeJS.Timeout | null;
                    canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                    canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    videoElement: HTMLVideoElement | null;
                }>;
                sliceVids: Record<string, {
                    waitingForPlayToDoLoopRuleName: string | null;
                }>;
            }[K_Type_8][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
                global: Record<"main", {
                    slatePosMoveConfigName: string;
                    timeScreenResized: number;
                    interactButtonPressTime: number;
                    heldPickups: string[];
                    storyOverlayToggled: boolean;
                    alarmTextIsVisible: boolean;
                    alarmText: string;
                    aSpeechBubbleIsShowing: boolean;
                    aConvoIsHappening: boolean;
                    frameTick: number;
                    debugMessage: string;
                    slateZoom: number;
                    slateZoomGoal: number;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                    slateZoomMoveConfigName: string;
                    slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    slatePos: import("chootils/dist/points2d").Point2D;
                    slatePosGoal: import("chootils/dist/points2d").Point2D;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                    slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    nowPlaceName: string;
                    goalPlaceName: string | null;
                    readyToSwapPlace: boolean;
                    isLoadingBetweenPlaces: boolean;
                    loadingOverlayToggled: boolean;
                    loadingOverlayFullyShowing: boolean;
                    goalCamWhenNextPlaceLoads: string | null;
                    goalCamNameWhenVidPlays: string | null;
                    goalCamNameAtLoop: string | null;
                    goalCamName: string | null;
                    nowCamName: string;
                    nowSegmentName: string;
                    goalSegmentName: string | null;
                    goalSegmentNameAtLoop: string | null;
                    goalSegmentNameWhenVidPlays: string | null;
                    goalSegmentWhenGoalPlaceLoads: string | null;
                    modelNamesLoaded: string[];
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    playerCharacter: string;
                    gravityValue: number;
                    playerMovingPaused: boolean;
                    focusedDoll: any;
                    focusedDollIsInView: boolean;
                }>;
                places: Record<string, {
                    testState: number;
                }>;
                dolls: Record<string | number, {
                    nowAnimation: string;
                    animationLoops: boolean;
                    inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                    animWeights: Record<string, number>;
                    animWeightsGoal: Record<string, number>;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                    animWeightsMoveConfigName: string;
                    animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    positionOnScreen: import("chootils/dist/points2d").Point2D;
                    rotationY: number;
                    rotationYGoal: number;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                    rotationYMoveConfigName: string;
                    rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    position: import("chootils/dist/points3d").Point3D;
                    positionGoal: import("chootils/dist/points3d").Point3D;
                    positionIsMoving: boolean;
                    positionMoveMode: import("repond-movers/dist/types").MoveMode;
                    positionMoveConfigName: string;
                    positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                    modelName: string;
                    goalSpotName: string | null;
                }>;
                models: Record<string, {
                    wantToLoad: boolean;
                    isLoading: boolean;
                    isLoaded: boolean;
                }>;
                story: Record<"main", any>;
                keyboards: Record<"main", {
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    ArrowDown: boolean;
                    KeyQ: boolean;
                    KeyE: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    Space: boolean;
                    Enter: boolean;
                    KeyZ: boolean;
                    KeyM: boolean;
                }>;
                miniBubbles: Record<string | number, {
                    isVisible: boolean;
                    isFullyHidden: boolean;
                    text: string;
                    forCharacter: string | null;
                    position: import("chootils/dist/points2d").Point2D;
                }>;
                characters: Record<string | number, {
                    dollName: string;
                    atTriggers: Partial<Record<string, boolean>>;
                    atCamCubes: Partial<Record<string, boolean>>;
                    hasLeftFirstTrigger: boolean;
                }>;
                players: Record<"main", {
                    lastSafeInputAngle: number | null;
                    inputVelocity: import("chootils/dist/points2d").Point2D;
                    isJumping: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    interactButtonPressTime: number;
                    jumpButtonPressTime: number;
                    jumpButtonReleaseTime: number;
                    pickupButtonPressTime: number;
                    virtualControlsPressTime: number;
                    virtualControlsReleaseTime: number;
                    canShowVirtualButtons: boolean;
                    animationNames: {
                        walking: string;
                        idle: string;
                    };
                }>;
                speechBubbles: Record<string | number | symbol, any>;
                stateVids: Record<string | number, {
                    vidState: import("./stateVids").VidState;
                    playType: "pause" | "play";
                    goalSeekTime: number | null;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    wantToUnload: boolean;
                    wantToLoad: boolean;
                    videoSource: string;
                    autoplay: boolean;
                }>;
                sliceVids: Record<string, {
                    stateVidId_playing: string | null;
                    stateVidId_waiting: string | null;
                    sliceVidState: import("./sliceVids").SliceVidState;
                    nowSlice: {
                        time: number;
                        duration: number;
                    };
                    goalSlice: import("./sliceVids").VidSlice | null;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    newPlayingVidStartedTime: number;
                    nowSliceSeekedTime: number;
                }>;
            }[K_Type_8]>>];
            frameDuration: number;
        }) => void;
        atStepEnd?: boolean | undefined;
        name?: string | undefined;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
    }) => string;
    stopEffect: (listenerName: string) => void;
    useStore: <K_Type_9 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", T_ReturnedRepondProps>(whatToReturn: (state: {
        readonly global: {
            readonly main: {
                readonly slatePosMoveConfigName: string;
                readonly timeScreenResized: number;
                readonly interactButtonPressTime: number;
                readonly heldPickups: string[];
                readonly storyOverlayToggled: boolean;
                readonly alarmTextIsVisible: boolean;
                readonly alarmText: string;
                readonly aSpeechBubbleIsShowing: boolean;
                readonly aConvoIsHappening: boolean;
                readonly frameTick: number;
                readonly debugMessage: string;
                readonly slateZoom: number;
                readonly slateZoomGoal: number;
                readonly slateZoomIsMoving: boolean;
                readonly slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly slateZoomMoveConfigName: string;
                readonly slateZoomMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly slatePos: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly slatePosGoal: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly slatePosIsMoving: boolean;
                readonly slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly slatePosMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly nowPlaceName: string;
                readonly goalPlaceName: string | null;
                readonly readyToSwapPlace: boolean;
                readonly isLoadingBetweenPlaces: boolean;
                readonly loadingOverlayToggled: boolean;
                readonly loadingOverlayFullyShowing: boolean;
                readonly goalCamWhenNextPlaceLoads: string | null;
                readonly goalCamNameWhenVidPlays: string | null;
                readonly goalCamNameAtLoop: string | null;
                readonly goalCamName: string | null;
                readonly nowCamName: string;
                readonly nowSegmentName: string;
                readonly goalSegmentName: string | null;
                readonly goalSegmentNameAtLoop: string | null;
                readonly goalSegmentNameWhenVidPlays: string | null;
                readonly goalSegmentWhenGoalPlaceLoads: string | null;
                readonly modelNamesLoaded: string[];
                readonly newPlaceModelLoaded: boolean;
                readonly newPlaceVideosLoaded: boolean;
                readonly newPlaceProbesLoaded: boolean;
                readonly playerCharacter: string;
                readonly gravityValue: number;
                readonly playerMovingPaused: boolean;
                readonly focusedDoll: any;
                readonly focusedDollIsInView: boolean;
            };
        };
        readonly places: {
            readonly [x: string]: {
                readonly testState: number;
            };
        };
        readonly dolls: {
            readonly [x: string]: {
                readonly nowAnimation: string;
                readonly animationLoops: boolean;
                readonly inRange: {
                    readonly [x: string]: {
                        readonly touch: boolean;
                        readonly talk: boolean;
                        readonly see: boolean;
                    };
                };
                readonly animWeights: {
                    readonly [x: string]: number;
                };
                readonly animWeightsGoal: {
                    readonly [x: string]: number;
                };
                readonly animWeightsIsMoving: boolean;
                readonly animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly animWeightsMoveConfigName: string;
                readonly animWeightsMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly positionOnScreen: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly rotationY: number;
                readonly rotationYGoal: number;
                readonly rotationYIsMoving: boolean;
                readonly rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly rotationYMoveConfigName: string;
                readonly rotationYMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionGoal: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionIsMoving: boolean;
                readonly positionMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly positionMoveConfigName: string;
                readonly positionMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly modelName: string;
                readonly goalSpotName: string | null;
            };
            readonly [x: number]: {
                readonly nowAnimation: string;
                readonly animationLoops: boolean;
                readonly inRange: {
                    readonly [x: string]: {
                        readonly touch: boolean;
                        readonly talk: boolean;
                        readonly see: boolean;
                    };
                };
                readonly animWeights: {
                    readonly [x: string]: number;
                };
                readonly animWeightsGoal: {
                    readonly [x: string]: number;
                };
                readonly animWeightsIsMoving: boolean;
                readonly animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly animWeightsMoveConfigName: string;
                readonly animWeightsMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly positionOnScreen: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly rotationY: number;
                readonly rotationYGoal: number;
                readonly rotationYIsMoving: boolean;
                readonly rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly rotationYMoveConfigName: string;
                readonly rotationYMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionGoal: {
                    readonly x: number;
                    readonly y: number;
                    readonly z: number;
                };
                readonly positionIsMoving: boolean;
                readonly positionMoveMode: import("repond-movers/dist/types").MoveMode;
                readonly positionMoveConfigName: string;
                readonly positionMoveConfigs: {
                    readonly [x: string]: {
                        readonly mass: number;
                        readonly stiffness: number;
                        readonly damping: number;
                        readonly friction: number;
                    };
                };
                readonly modelName: string;
                readonly goalSpotName: string | null;
            };
        };
        readonly models: {
            readonly [x: string]: {
                readonly wantToLoad: boolean;
                readonly isLoading: boolean;
                readonly isLoaded: boolean;
            };
        };
        readonly story: {
            readonly main: any;
        };
        readonly keyboards: {
            readonly main: {
                readonly KeyW: boolean;
                readonly KeyA: boolean;
                readonly KeyS: boolean;
                readonly KeyD: boolean;
                readonly ArrowLeft: boolean;
                readonly ArrowRight: boolean;
                readonly ArrowUp: boolean;
                readonly ArrowDown: boolean;
                readonly KeyQ: boolean;
                readonly KeyE: boolean;
                readonly ShiftLeft: boolean;
                readonly ControlLeft: boolean;
                readonly Space: boolean;
                readonly Enter: boolean;
                readonly KeyZ: boolean;
                readonly KeyM: boolean;
            };
        };
        readonly miniBubbles: {
            readonly [x: string]: {
                readonly isVisible: boolean;
                readonly isFullyHidden: boolean;
                readonly text: string;
                readonly forCharacter: string | null;
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                };
            };
            readonly [x: number]: {
                readonly isVisible: boolean;
                readonly isFullyHidden: boolean;
                readonly text: string;
                readonly forCharacter: string | null;
                readonly position: {
                    readonly x: number;
                    readonly y: number;
                };
            };
        };
        readonly characters: {
            readonly [x: string]: {
                readonly dollName: string;
                readonly atTriggers: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly atCamCubes: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly hasLeftFirstTrigger: boolean;
            };
            readonly [x: number]: {
                readonly dollName: string;
                readonly atTriggers: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly atCamCubes: {
                    readonly [x: string]: boolean | undefined;
                };
                readonly hasLeftFirstTrigger: boolean;
            };
        };
        readonly players: {
            readonly main: {
                readonly lastSafeInputAngle: number | null;
                readonly inputVelocity: {
                    readonly x: number;
                    readonly y: number;
                };
                readonly isJumping: boolean;
                readonly isOnGround: boolean;
                readonly canJump: boolean;
                readonly interactButtonPressTime: number;
                readonly jumpButtonPressTime: number;
                readonly jumpButtonReleaseTime: number;
                readonly pickupButtonPressTime: number;
                readonly virtualControlsPressTime: number;
                readonly virtualControlsReleaseTime: number;
                readonly canShowVirtualButtons: boolean;
                readonly animationNames: {
                    readonly walking: string;
                    readonly idle: string;
                };
            };
        };
        readonly speechBubbles: {
            readonly [x: string]: any;
            readonly [x: number]: any;
            readonly [x: symbol]: any;
        };
        readonly stateVids: {
            readonly [x: string]: {
                readonly vidState: import("./stateVids").VidState;
                readonly playType: "pause" | "play";
                readonly goalSeekTime: number | null;
                readonly wantToPlay: boolean;
                readonly wantToPause: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoad: boolean;
                readonly videoSource: string;
                readonly autoplay: boolean;
            };
            readonly [x: number]: {
                readonly vidState: import("./stateVids").VidState;
                readonly playType: "pause" | "play";
                readonly goalSeekTime: number | null;
                readonly wantToPlay: boolean;
                readonly wantToPause: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoad: boolean;
                readonly videoSource: string;
                readonly autoplay: boolean;
            };
        };
        readonly sliceVids: {
            readonly [x: string]: {
                readonly stateVidId_playing: string | null;
                readonly stateVidId_waiting: string | null;
                readonly sliceVidState: import("./sliceVids").SliceVidState;
                readonly nowSlice: {
                    readonly time: number;
                    readonly duration: number;
                };
                readonly goalSlice: {
                    readonly time: number;
                    readonly duration: number;
                } | null;
                readonly wantToLoad: boolean;
                readonly wantToUnload: boolean;
                readonly wantToLoop: boolean;
                readonly switchSlice_keepProgress: boolean;
                readonly newPlayingVidStartedTime: number;
                readonly nowSliceSeekedTime: number;
            };
        };
    }) => T_ReturnedRepondProps, check: ({
        type?: K_Type_9 | undefined;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>>[] | undefined;
        prop?: import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>>]>[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    } | {
        type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
        name?: string | string[] | undefined;
        prop?: (string | number | symbol)[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    })[] | ({
        type?: K_Type_9 | undefined;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>>[] | undefined;
        prop?: import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_9]>>]>[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    } | {
        type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
        name?: string | string[] | undefined;
        prop?: (string | number | symbol)[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    }), hookDeps?: any[] | undefined) => T_ReturnedRepondProps;
    useStoreEffect: <K_Type_10 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids">(run: (diffInfo: {
        itemTypesChanged: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[];
        itemsChanged: {
            global: string[];
            places: string[];
            dolls: string[];
            models: string[];
            story: string[];
            keyboards: string[];
            miniBubbles: string[];
            characters: string[];
            players: string[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
            all__: string[];
        };
        propsChanged: {
            global: Record<"main", ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[]> & {
                all__: ("nowPlaceName" | "nowCamName" | "slatePosGoal" | "slatePos" | "focusedDoll" | "slateZoom" | "slateZoomGoal" | "focusedDollIsInView" | "slatePosIsMoving" | "slatePosMoveMode" | "slatePosMoveConfigName" | "slatePosMoveConfigs" | "slateZoomIsMoving" | "slateZoomMoveMode" | "slateZoomMoveConfigName" | "slateZoomMoveConfigs" | "playerCharacter" | "playerMovingPaused" | "heldPickups" | "nowSegmentName" | "aConvoIsHappening" | "isLoadingBetweenPlaces" | "storyOverlayToggled" | "goalCamName" | "goalSegmentNameAtLoop" | "goalCamNameAtLoop" | "alarmText" | "alarmTextIsVisible" | "interactButtonPressTime" | "modelNamesLoaded" | "goalSegmentNameWhenVidPlays" | "goalCamNameWhenVidPlays" | "timeScreenResized" | "goalSegmentName" | "newPlaceModelLoaded" | "newPlaceVideosLoaded" | "newPlaceProbesLoaded" | "loadingOverlayFullyShowing" | "frameTick" | "loadingOverlayToggled" | "goalPlaceName" | "readyToSwapPlace" | "goalSegmentWhenGoalPlaceLoads" | "goalCamWhenNextPlaceLoads" | "aSpeechBubbleIsShowing" | "gravityValue" | "debugMessage")[];
            };
            places: Record<string, "testState"[]> & {
                all__: "testState"[];
            };
            dolls: Record<string, ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[]> & {
                all__: ("modelName" | "position" | "animWeightsGoal" | "nowAnimation" | "positionOnScreen" | "positionGoal" | "positionIsMoving" | "positionMoveMode" | "positionMoveConfigName" | "positionMoveConfigs" | "rotationY" | "rotationYGoal" | "rotationYIsMoving" | "rotationYMoveMode" | "rotationYMoveConfigName" | "rotationYMoveConfigs" | "animWeights" | "animWeightsMoveConfigName" | "animWeightsMoveConfigs" | "animWeightsIsMoving" | "animWeightsMoveMode" | "inRange" | "goalSpotName" | "animationLoops")[];
            };
            models: Record<string, ("wantToLoad" | "isLoaded" | "isLoading")[]> & {
                all__: ("wantToLoad" | "isLoaded" | "isLoading")[];
            };
            story: Record<"main", (string | number | symbol)[]> & {
                all__: (string | number | symbol)[];
            };
            keyboards: Record<"main", ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[]> & {
                all__: ("ArrowDown" | "ArrowLeft" | "ArrowRight" | "ArrowUp" | "KeyW" | "KeyA" | "KeyS" | "KeyD" | "KeyE" | "Enter" | "Space" | "KeyM" | "KeyQ" | "ShiftLeft" | "ControlLeft" | "KeyZ")[];
            };
            miniBubbles: Record<string, ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[]> & {
                all__: ("position" | "isVisible" | "text" | "forCharacter" | "isFullyHidden")[];
            };
            characters: Record<string, ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[]> & {
                all__: ("dollName" | "atTriggers" | "hasLeftFirstTrigger" | "atCamCubes")[];
            };
            players: Record<"main", ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[]> & {
                all__: ("animationNames" | "interactButtonPressTime" | "canShowVirtualButtons" | "virtualControlsPressTime" | "virtualControlsReleaseTime" | "jumpButtonPressTime" | "jumpButtonReleaseTime" | "inputVelocity" | "isOnGround" | "canJump" | "isJumping" | "lastSafeInputAngle" | "pickupButtonPressTime")[];
            };
            speechBubbles: Record<string, (string | number | symbol)[]> & {
                all__: (string | number | symbol)[];
            };
            stateVids: Record<string, ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[]> & {
                all__: ("autoplay" | "wantToLoad" | "wantToUnload" | "vidState" | "goalSeekTime" | "wantToPlay" | "wantToPause" | "playType" | "videoSource")[];
            };
            sliceVids: Record<string, ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[]> & {
                all__: ("stateVidId_playing" | "sliceVidState" | "nowSlice" | "wantToLoad" | "wantToUnload" | "newPlayingVidStartedTime" | "goalSlice" | "wantToLoop" | "switchSlice_keepProgress" | "stateVidId_waiting" | "nowSliceSeekedTime")[];
            };
        } & {
            all__: (string | number | symbol)[];
        };
        itemsAdded: {
            global: string[];
            places: string[];
            dolls: string[];
            models: string[];
            story: string[];
            keyboards: string[];
            miniBubbles: string[];
            characters: string[];
            players: string[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
            all__: string[];
        };
        itemsRemoved: {
            global: string[];
            places: string[];
            dolls: string[];
            models: string[];
            story: string[];
            keyboards: string[];
            miniBubbles: string[];
            characters: string[];
            players: string[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
            all__: string[];
        };
        itemTypesChangedBool: Record<"global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids" | "all__", boolean>;
        itemsChangedBool: {
            global: Record<string, boolean>;
            places: Record<string, boolean>;
            dolls: Record<string, boolean>;
            models: Record<string, boolean>;
            story: Record<string, boolean>;
            keyboards: Record<string, boolean>;
            miniBubbles: Record<string, boolean>;
            characters: Record<string, boolean>;
            players: Record<string, boolean>;
            speechBubbles: Record<string, boolean>;
            stateVids: Record<string, boolean>;
            sliceVids: Record<string, boolean>;
            all__: Record<string, boolean>;
        };
        propsChangedBool: {
            global: Record<"main", {
                nowPlaceName: boolean;
                nowCamName: boolean;
                slatePosGoal: boolean;
                slatePos: boolean;
                focusedDoll: boolean;
                slateZoom: boolean;
                slateZoomGoal: boolean;
                focusedDollIsInView: boolean;
                slatePosIsMoving: boolean;
                slatePosMoveMode: boolean;
                slatePosMoveConfigName: boolean;
                slatePosMoveConfigs: boolean;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: boolean;
                slateZoomMoveConfigName: boolean;
                slateZoomMoveConfigs: boolean;
                playerCharacter: boolean;
                playerMovingPaused: boolean;
                heldPickups: boolean;
                nowSegmentName: boolean;
                aConvoIsHappening: boolean;
                isLoadingBetweenPlaces: boolean;
                storyOverlayToggled: boolean;
                goalCamName: boolean;
                goalSegmentNameAtLoop: boolean;
                goalCamNameAtLoop: boolean;
                alarmText: boolean;
                alarmTextIsVisible: boolean;
                interactButtonPressTime: boolean;
                modelNamesLoaded: boolean;
                goalSegmentNameWhenVidPlays: boolean;
                goalCamNameWhenVidPlays: boolean;
                timeScreenResized: boolean;
                goalSegmentName: boolean;
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                loadingOverlayFullyShowing: boolean;
                frameTick: boolean;
                loadingOverlayToggled: boolean;
                goalPlaceName: boolean;
                readyToSwapPlace: boolean;
                goalSegmentWhenGoalPlaceLoads: boolean;
                goalCamWhenNextPlaceLoads: boolean;
                aSpeechBubbleIsShowing: boolean;
                gravityValue: boolean;
                debugMessage: boolean;
            }> & {
                all__: {
                    nowPlaceName: boolean;
                    nowCamName: boolean;
                    slatePosGoal: boolean;
                    slatePos: boolean;
                    focusedDoll: boolean;
                    slateZoom: boolean;
                    slateZoomGoal: boolean;
                    focusedDollIsInView: boolean;
                    slatePosIsMoving: boolean;
                    slatePosMoveMode: boolean;
                    slatePosMoveConfigName: boolean;
                    slatePosMoveConfigs: boolean;
                    slateZoomIsMoving: boolean;
                    slateZoomMoveMode: boolean;
                    slateZoomMoveConfigName: boolean;
                    slateZoomMoveConfigs: boolean;
                    playerCharacter: boolean;
                    playerMovingPaused: boolean;
                    heldPickups: boolean;
                    nowSegmentName: boolean;
                    aConvoIsHappening: boolean;
                    isLoadingBetweenPlaces: boolean;
                    storyOverlayToggled: boolean;
                    goalCamName: boolean;
                    goalSegmentNameAtLoop: boolean;
                    goalCamNameAtLoop: boolean;
                    alarmText: boolean;
                    alarmTextIsVisible: boolean;
                    interactButtonPressTime: boolean;
                    modelNamesLoaded: boolean;
                    goalSegmentNameWhenVidPlays: boolean;
                    goalCamNameWhenVidPlays: boolean;
                    timeScreenResized: boolean;
                    goalSegmentName: boolean;
                    newPlaceModelLoaded: boolean;
                    newPlaceVideosLoaded: boolean;
                    newPlaceProbesLoaded: boolean;
                    loadingOverlayFullyShowing: boolean;
                    frameTick: boolean;
                    loadingOverlayToggled: boolean;
                    goalPlaceName: boolean;
                    readyToSwapPlace: boolean;
                    goalSegmentWhenGoalPlaceLoads: boolean;
                    goalCamWhenNextPlaceLoads: boolean;
                    aSpeechBubbleIsShowing: boolean;
                    gravityValue: boolean;
                    debugMessage: boolean;
                };
            };
            places: Record<string, {
                testState: boolean;
            }> & {
                all__: {
                    testState: boolean;
                };
            };
            dolls: Record<string, {
                modelName: boolean;
                position: boolean;
                animWeightsGoal: boolean;
                nowAnimation: boolean;
                positionOnScreen: boolean;
                positionGoal: boolean;
                positionIsMoving: boolean;
                positionMoveMode: boolean;
                positionMoveConfigName: boolean;
                positionMoveConfigs: boolean;
                rotationY: boolean;
                rotationYGoal: boolean;
                rotationYIsMoving: boolean;
                rotationYMoveMode: boolean;
                rotationYMoveConfigName: boolean;
                rotationYMoveConfigs: boolean;
                animWeights: boolean;
                animWeightsMoveConfigName: boolean;
                animWeightsMoveConfigs: boolean;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: boolean;
                inRange: boolean;
                goalSpotName: boolean;
                animationLoops: boolean;
            }> & {
                all__: {
                    modelName: boolean;
                    position: boolean;
                    animWeightsGoal: boolean;
                    nowAnimation: boolean;
                    positionOnScreen: boolean;
                    positionGoal: boolean;
                    positionIsMoving: boolean;
                    positionMoveMode: boolean;
                    positionMoveConfigName: boolean;
                    positionMoveConfigs: boolean;
                    rotationY: boolean;
                    rotationYGoal: boolean;
                    rotationYIsMoving: boolean;
                    rotationYMoveMode: boolean;
                    rotationYMoveConfigName: boolean;
                    rotationYMoveConfigs: boolean;
                    animWeights: boolean;
                    animWeightsMoveConfigName: boolean;
                    animWeightsMoveConfigs: boolean;
                    animWeightsIsMoving: boolean;
                    animWeightsMoveMode: boolean;
                    inRange: boolean;
                    goalSpotName: boolean;
                    animationLoops: boolean;
                };
            };
            models: Record<string, {
                wantToLoad: boolean;
                isLoaded: boolean;
                isLoading: boolean;
            }> & {
                all__: {
                    wantToLoad: boolean;
                    isLoaded: boolean;
                    isLoading: boolean;
                };
            };
            story: Record<"main", {
                [x: string]: boolean;
                [x: number]: boolean;
                [x: symbol]: boolean;
            }> & {
                all__: {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                };
            };
            keyboards: Record<"main", {
                ArrowDown: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                KeyE: boolean;
                Enter: boolean;
                Space: boolean;
                KeyM: boolean;
                KeyQ: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                KeyZ: boolean;
            }> & {
                all__: {
                    ArrowDown: boolean;
                    ArrowLeft: boolean;
                    ArrowRight: boolean;
                    ArrowUp: boolean;
                    KeyW: boolean;
                    KeyA: boolean;
                    KeyS: boolean;
                    KeyD: boolean;
                    KeyE: boolean;
                    Enter: boolean;
                    Space: boolean;
                    KeyM: boolean;
                    KeyQ: boolean;
                    ShiftLeft: boolean;
                    ControlLeft: boolean;
                    KeyZ: boolean;
                };
            };
            miniBubbles: Record<string, {
                position: boolean;
                isVisible: boolean;
                text: boolean;
                forCharacter: boolean;
                isFullyHidden: boolean;
            }> & {
                all__: {
                    position: boolean;
                    isVisible: boolean;
                    text: boolean;
                    forCharacter: boolean;
                    isFullyHidden: boolean;
                };
            };
            characters: Record<string, {
                dollName: boolean;
                atTriggers: boolean;
                hasLeftFirstTrigger: boolean;
                atCamCubes: boolean;
            }> & {
                all__: {
                    dollName: boolean;
                    atTriggers: boolean;
                    hasLeftFirstTrigger: boolean;
                    atCamCubes: boolean;
                };
            };
            players: Record<"main", {
                animationNames: boolean;
                interactButtonPressTime: boolean;
                canShowVirtualButtons: boolean;
                virtualControlsPressTime: boolean;
                virtualControlsReleaseTime: boolean;
                jumpButtonPressTime: boolean;
                jumpButtonReleaseTime: boolean;
                inputVelocity: boolean;
                isOnGround: boolean;
                canJump: boolean;
                isJumping: boolean;
                lastSafeInputAngle: boolean;
                pickupButtonPressTime: boolean;
            }> & {
                all__: {
                    animationNames: boolean;
                    interactButtonPressTime: boolean;
                    canShowVirtualButtons: boolean;
                    virtualControlsPressTime: boolean;
                    virtualControlsReleaseTime: boolean;
                    jumpButtonPressTime: boolean;
                    jumpButtonReleaseTime: boolean;
                    inputVelocity: boolean;
                    isOnGround: boolean;
                    canJump: boolean;
                    isJumping: boolean;
                    lastSafeInputAngle: boolean;
                    pickupButtonPressTime: boolean;
                };
            };
            speechBubbles: Record<string, {
                [x: string]: boolean;
                [x: number]: boolean;
                [x: symbol]: boolean;
            }> & {
                all__: {
                    [x: string]: boolean;
                    [x: number]: boolean;
                    [x: symbol]: boolean;
                };
            };
            stateVids: Record<string, {
                autoplay: boolean;
                wantToLoad: boolean;
                wantToUnload: boolean;
                vidState: boolean;
                goalSeekTime: boolean;
                wantToPlay: boolean;
                wantToPause: boolean;
                playType: boolean;
                videoSource: boolean;
            }> & {
                all__: {
                    autoplay: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    vidState: boolean;
                    goalSeekTime: boolean;
                    wantToPlay: boolean;
                    wantToPause: boolean;
                    playType: boolean;
                    videoSource: boolean;
                };
            };
            sliceVids: Record<string, {
                stateVidId_playing: boolean;
                sliceVidState: boolean;
                nowSlice: boolean;
                wantToLoad: boolean;
                wantToUnload: boolean;
                newPlayingVidStartedTime: boolean;
                goalSlice: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                stateVidId_waiting: boolean;
                nowSliceSeekedTime: boolean;
            }> & {
                all__: {
                    stateVidId_playing: boolean;
                    sliceVidState: boolean;
                    nowSlice: boolean;
                    wantToLoad: boolean;
                    wantToUnload: boolean;
                    newPlayingVidStartedTime: boolean;
                    goalSlice: boolean;
                    wantToLoop: boolean;
                    switchSlice_keepProgress: boolean;
                    stateVidId_waiting: boolean;
                    nowSliceSeekedTime: boolean;
                };
            };
        } & {
            all__: {
                [x: string]: boolean;
                [x: number]: boolean;
                [x: symbol]: boolean;
            };
        };
        itemsAddedBool: {
            global: Record<string, boolean>;
            places: Record<string, boolean>;
            dolls: Record<string, boolean>;
            models: Record<string, boolean>;
            story: Record<string, boolean>;
            keyboards: Record<string, boolean>;
            miniBubbles: Record<string, boolean>;
            characters: Record<string, boolean>;
            players: Record<string, boolean>;
            speechBubbles: Record<string, boolean>;
            stateVids: Record<string, boolean>;
            sliceVids: Record<string, boolean>;
            all__: Record<string, boolean>;
        };
        itemsRemovedBool: {
            global: Record<string, boolean>;
            places: Record<string, boolean>;
            dolls: Record<string, boolean>;
            models: Record<string, boolean>;
            story: Record<string, boolean>;
            keyboards: Record<string, boolean>;
            miniBubbles: Record<string, boolean>;
            characters: Record<string, boolean>;
            players: Record<string, boolean>;
            speechBubbles: Record<string, boolean>;
            stateVids: Record<string, boolean>;
            sliceVids: Record<string, boolean>;
            all__: Record<string, boolean>;
        };
    }, frameDuration: number) => void, check: ({
        type?: K_Type_10 | undefined;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>>[] | undefined;
        prop?: import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>>]>[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    } | {
        type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
        name?: string | string[] | undefined;
        prop?: (string | number | symbol)[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    })[] | ({
        type?: K_Type_10 | undefined;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>>[] | undefined;
        prop?: import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_10]>>]>[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    } | {
        type?: ("global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids")[] | undefined;
        name?: string | string[] | undefined;
        prop?: (string | number | symbol)[] | undefined;
        addedOrRemoved?: boolean | undefined;
        becomes?: undefined;
    }), hookDeps?: any[] | undefined) => void;
    useStoreItem: <K_Type_11 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", K_PropertyName_3 extends import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_11][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_11]>>]>, T_ReturnType, T_TheParameters = {
        itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>;
        prevItemState: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>];
        itemState: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>];
        itemRefs: {
            global: Record<"main", {
                sounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                music: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                musicEffects: {
                    lowPass: BiquadFilterNode | null;
                    compress: DynamicsCompressorNode | null;
                    extraGain: GainNode | null;
                };
                solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                timerSpeed: number;
                aConvoIsHappening_timeout: NodeJS.Timeout | null;
                camSegmentRulesOptions: Partial<{
                    [x: string]: Partial<{
                        [x: string]: (usefulStuff: Record<any, any>) => string;
                    }>;
                }> | null;
                onPickupButtonClick: ((pickupName: any) => void) | null;
                slateZoomMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "slateZoom";
                        valueGoal: "slateZoomGoal";
                        isMoving: "slateZoomIsMoving";
                        moveMode: "slateZoomMoveMode";
                        physicsConfigName: "slateZoomMoveConfigName";
                        physicsConfigs: "slateZoomMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                slatePosMoverRefs: {
                    velocity: import("chootils/dist/points2d").Point2D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "slatePos";
                        valueGoal: "slatePosGoal";
                        isMoving: "slatePosIsMoving";
                        moveMode: "slatePosMoveMode";
                        physicsConfigName: "slatePosMoveConfigName";
                        physicsConfigs: "slatePosMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                scene: import("@babylonjs/core").Scene | null;
                backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropSize: {
                    width: number;
                    height: number;
                };
                stretchVideoSize: {
                    x: number;
                    y: number;
                };
                stretchVideoGoalSize: {
                    x: number;
                    y: number;
                };
                stretchSceneSize: {
                    x: number;
                    y: number;
                };
            }>;
            places: Record<string, {
                rootMesh: import("@babylonjs/core").AbstractMesh | null;
                spotPositions: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                spotRotations: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                soundspotSounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                triggerMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                wallMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                camsRefs: {
                    [x: string]: {
                        camera: import("@babylonjs/core").TargetCamera | null;
                        camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                        probeTexture: import("@babylonjs/core").CubeTexture | null;
                        isTriggerable: boolean;
                    };
                };
            }>;
            dolls: Record<string | number, {
                animWeightsMoverRefs: {
                    stateNames: {
                        value: "animWeights";
                        valueGoal: "animWeightsGoal";
                        isMoving: "animWeightsIsMoving";
                        moveMode: "animWeightsMoveMode";
                        physicsConfigName: "animWeightsMoveConfigName";
                        physicsConfigs: "animWeightsMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    animRefs: Record<string, {
                        velocity: number;
                        recentSpeeds: number[];
                    }>;
                    animNames: readonly string[];
                };
                rotationYMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "rotationY";
                        valueGoal: "rotationYGoal";
                        isMoving: "rotationYIsMoving";
                        moveMode: "rotationYMoveMode";
                        physicsConfigName: "rotationYMoveConfigName";
                        physicsConfigs: "rotationYMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                positionMoverRefs: {
                    velocity: import("chootils/dist/points3d").Point3D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "position";
                        valueGoal: "positionGoal";
                        isMoving: "positionIsMoving";
                        moveMode: "positionMoveMode";
                        physicsConfigName: "positionMoveConfigName";
                        physicsConfigs: "positionMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                meshRef: import("@babylonjs/core").AbstractMesh | null;
                otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                assetRefs: {
                    meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                    skeleton: import("@babylonjs/core").Skeleton;
                    bones: Record<string, import("@babylonjs/core").Bone>;
                    aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                    materials: Record<string, import("@babylonjs/core").Material>;
                } | null;
                groundRef: import("@babylonjs/core").AbstractMesh | null;
                checkCollisions: boolean;
            }>;
            models: Record<string, {
                container: import("@babylonjs/core").AssetContainer | null;
                materialRef: import("@babylonjs/core").PBRMaterial | null;
                materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
            }>;
            story: Record<"main", Record<string, any>>;
            keyboards: Record<"main", {}>;
            miniBubbles: Record<string | number, {
                bubbleRef: any;
                textRef: any;
                videoRef: HTMLVideoElement | null;
            }>;
            characters: Record<string | number, {
                testRef: null;
            }>;
            players: Record<"main", {
                walkSpeed: number;
                canJumpTimeout: NodeJS.Timeout | null;
                canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                videoElement: HTMLVideoElement | null;
            }>;
            sliceVids: Record<string, {
                waitingForPlayToDoLoopRuleName: string | null;
            }>;
        }[K_Type_11][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>];
    }>(itemEffectCallback: (loopedInfo: T_TheParameters) => T_ReturnType, check: {
        prop?: K_PropertyName_3 | undefined;
        type: K_Type_11;
        name: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>;
        becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
        addedOrRemoved?: undefined;
    } | {
        prop?: K_PropertyName_3[] | undefined;
        type: K_Type_11;
        name: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_11]>>;
        becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
        addedOrRemoved?: undefined;
    }, hookDeps?: any[] | undefined) => T_ReturnType;
    useStoreItemEffect: <K_Type_12 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids", K_PropertyName_4 extends import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_12][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_12]>>]>, T_ReturnType_1>(run: (loopedInfo: {
        itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>;
        newValue: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>][K_PropertyName_4];
        previousValue: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>][K_PropertyName_4];
        itemState: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>];
        itemRefs: {
            global: Record<"main", {
                sounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                music: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                musicEffects: {
                    lowPass: BiquadFilterNode | null;
                    compress: DynamicsCompressorNode | null;
                    extraGain: GainNode | null;
                };
                solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                timerSpeed: number;
                aConvoIsHappening_timeout: NodeJS.Timeout | null;
                camSegmentRulesOptions: Partial<{
                    [x: string]: Partial<{
                        [x: string]: (usefulStuff: Record<any, any>) => string;
                    }>;
                }> | null;
                onPickupButtonClick: ((pickupName: any) => void) | null;
                slateZoomMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "slateZoom";
                        valueGoal: "slateZoomGoal";
                        isMoving: "slateZoomIsMoving";
                        moveMode: "slateZoomMoveMode";
                        physicsConfigName: "slateZoomMoveConfigName";
                        physicsConfigs: "slateZoomMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                slatePosMoverRefs: {
                    velocity: import("chootils/dist/points2d").Point2D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "slatePos";
                        valueGoal: "slatePosGoal";
                        isMoving: "slatePosIsMoving";
                        moveMode: "slatePosMoveMode";
                        physicsConfigName: "slatePosMoveConfigName";
                        physicsConfigs: "slatePosMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                scene: import("@babylonjs/core").Scene | null;
                backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropSize: {
                    width: number;
                    height: number;
                };
                stretchVideoSize: {
                    x: number;
                    y: number;
                };
                stretchVideoGoalSize: {
                    x: number;
                    y: number;
                };
                stretchSceneSize: {
                    x: number;
                    y: number;
                };
            }>;
            places: Record<string, {
                rootMesh: import("@babylonjs/core").AbstractMesh | null;
                spotPositions: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                spotRotations: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                soundspotSounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                triggerMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                wallMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                camsRefs: {
                    [x: string]: {
                        camera: import("@babylonjs/core").TargetCamera | null;
                        camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                        probeTexture: import("@babylonjs/core").CubeTexture | null;
                        isTriggerable: boolean;
                    };
                };
            }>;
            dolls: Record<string | number, {
                animWeightsMoverRefs: {
                    stateNames: {
                        value: "animWeights";
                        valueGoal: "animWeightsGoal";
                        isMoving: "animWeightsIsMoving";
                        moveMode: "animWeightsMoveMode";
                        physicsConfigName: "animWeightsMoveConfigName";
                        physicsConfigs: "animWeightsMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    animRefs: Record<string, {
                        velocity: number;
                        recentSpeeds: number[];
                    }>;
                    animNames: readonly string[];
                };
                rotationYMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "rotationY";
                        valueGoal: "rotationYGoal";
                        isMoving: "rotationYIsMoving";
                        moveMode: "rotationYMoveMode";
                        physicsConfigName: "rotationYMoveConfigName";
                        physicsConfigs: "rotationYMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                positionMoverRefs: {
                    velocity: import("chootils/dist/points3d").Point3D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "position";
                        valueGoal: "positionGoal";
                        isMoving: "positionIsMoving";
                        moveMode: "positionMoveMode";
                        physicsConfigName: "positionMoveConfigName";
                        physicsConfigs: "positionMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                meshRef: import("@babylonjs/core").AbstractMesh | null;
                otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                assetRefs: {
                    meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                    skeleton: import("@babylonjs/core").Skeleton;
                    bones: Record<string, import("@babylonjs/core").Bone>;
                    aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                    materials: Record<string, import("@babylonjs/core").Material>;
                } | null;
                groundRef: import("@babylonjs/core").AbstractMesh | null;
                checkCollisions: boolean;
            }>;
            models: Record<string, {
                container: import("@babylonjs/core").AssetContainer | null;
                materialRef: import("@babylonjs/core").PBRMaterial | null;
                materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
            }>;
            story: Record<"main", Record<string, any>>;
            keyboards: Record<"main", {}>;
            miniBubbles: Record<string | number, {
                bubbleRef: any;
                textRef: any;
                videoRef: HTMLVideoElement | null;
            }>;
            characters: Record<string | number, {
                testRef: null;
            }>;
            players: Record<"main", {
                walkSpeed: number;
                canJumpTimeout: NodeJS.Timeout | null;
                canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                videoElement: HTMLVideoElement | null;
            }>;
            sliceVids: Record<string, {
                waitingForPlayToDoLoopRuleName: string | null;
            }>;
        }[K_Type_12][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>];
        frameDuration: number;
    }) => T_ReturnType_1, check: {
        prop?: K_PropertyName_4 | undefined;
        type: K_Type_12;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>[] | undefined;
        becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
        addedOrRemoved?: undefined;
    } | {
        prop?: K_PropertyName_4[] | undefined;
        type: K_Type_12;
        name?: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>> | import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_12]>>[] | undefined;
        becomes?: string | number | boolean | ((theValue: any, prevValue: any) => boolean) | undefined;
        addedOrRemoved?: undefined;
    }, hookDeps?: any[] | undefined) => void;
    useStoreItemPropsEffect: <K_Type_13 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids">(checkItem: {
        type: K_Type_13;
        name: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>;
        step?: "checkCollisions" | "input" | "default" | "stateVidStateUpdates" | "sliceVidStateUpdates" | "respondToNewPlace" | "cameraChange" | "editPosition" | "positionReaction" | "collisionReaction" | "story" | "storyReaction" | "slatePosition" | "slatePositionDontGoOverEdges" | "slatePositionStartMovers" | "dollAnimation" | "dollAnimation2" | "dollAnimationStartMovers" | "positionUi" | "loadNewPlaceModels" | "loadNewPlace" | "chooseVideoSlice" | "sliceVidWantsToPlay" | "sliceVidWantsToPlay2" | "safeVidWantsToPlay" | "rendering" | "overlay" | undefined;
    }, onPropChanges: Partial<{ [K_PropertyName_5 in import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_13][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }[K_Type_13]>>]>]: (loopedInfo: {
        itemName: import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>;
        newValue: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>][K_PropertyName_5];
        previousValue: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>][K_PropertyName_5];
        itemState: {
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>];
        itemRefs: {
            global: Record<"main", {
                sounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                music: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                musicEffects: {
                    lowPass: BiquadFilterNode | null;
                    compress: DynamicsCompressorNode | null;
                    extraGain: GainNode | null;
                };
                solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                timerSpeed: number;
                aConvoIsHappening_timeout: NodeJS.Timeout | null;
                camSegmentRulesOptions: Partial<{
                    [x: string]: Partial<{
                        [x: string]: (usefulStuff: Record<any, any>) => string;
                    }>;
                }> | null;
                onPickupButtonClick: ((pickupName: any) => void) | null;
                slateZoomMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "slateZoom";
                        valueGoal: "slateZoomGoal";
                        isMoving: "slateZoomIsMoving";
                        moveMode: "slateZoomMoveMode";
                        physicsConfigName: "slateZoomMoveConfigName";
                        physicsConfigs: "slateZoomMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                slatePosMoverRefs: {
                    velocity: import("chootils/dist/points2d").Point2D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "slatePos";
                        valueGoal: "slatePosGoal";
                        isMoving: "slatePosIsMoving";
                        moveMode: "slatePosMoveMode";
                        physicsConfigName: "slatePosMoveConfigName";
                        physicsConfigs: "slatePosMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                scene: import("@babylonjs/core").Scene | null;
                backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropSize: {
                    width: number;
                    height: number;
                };
                stretchVideoSize: {
                    x: number;
                    y: number;
                };
                stretchVideoGoalSize: {
                    x: number;
                    y: number;
                };
                stretchSceneSize: {
                    x: number;
                    y: number;
                };
            }>;
            places: Record<string, {
                rootMesh: import("@babylonjs/core").AbstractMesh | null;
                spotPositions: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                spotRotations: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                soundspotSounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                triggerMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                wallMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                camsRefs: {
                    [x: string]: {
                        camera: import("@babylonjs/core").TargetCamera | null;
                        camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                        probeTexture: import("@babylonjs/core").CubeTexture | null;
                        isTriggerable: boolean;
                    };
                };
            }>;
            dolls: Record<string | number, {
                animWeightsMoverRefs: {
                    stateNames: {
                        value: "animWeights";
                        valueGoal: "animWeightsGoal";
                        isMoving: "animWeightsIsMoving";
                        moveMode: "animWeightsMoveMode";
                        physicsConfigName: "animWeightsMoveConfigName";
                        physicsConfigs: "animWeightsMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    animRefs: Record<string, {
                        velocity: number;
                        recentSpeeds: number[];
                    }>;
                    animNames: readonly string[];
                };
                rotationYMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "rotationY";
                        valueGoal: "rotationYGoal";
                        isMoving: "rotationYIsMoving";
                        moveMode: "rotationYMoveMode";
                        physicsConfigName: "rotationYMoveConfigName";
                        physicsConfigs: "rotationYMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                positionMoverRefs: {
                    velocity: import("chootils/dist/points3d").Point3D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "position";
                        valueGoal: "positionGoal";
                        isMoving: "positionIsMoving";
                        moveMode: "positionMoveMode";
                        physicsConfigName: "positionMoveConfigName";
                        physicsConfigs: "positionMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                meshRef: import("@babylonjs/core").AbstractMesh | null;
                otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                assetRefs: {
                    meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                    skeleton: import("@babylonjs/core").Skeleton;
                    bones: Record<string, import("@babylonjs/core").Bone>;
                    aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                    materials: Record<string, import("@babylonjs/core").Material>;
                } | null;
                groundRef: import("@babylonjs/core").AbstractMesh | null;
                checkCollisions: boolean;
            }>;
            models: Record<string, {
                container: import("@babylonjs/core").AssetContainer | null;
                materialRef: import("@babylonjs/core").PBRMaterial | null;
                materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
            }>;
            story: Record<"main", Record<string, any>>;
            keyboards: Record<"main", {}>;
            miniBubbles: Record<string | number, {
                bubbleRef: any;
                textRef: any;
                videoRef: HTMLVideoElement | null;
            }>;
            characters: Record<string | number, {
                testRef: null;
            }>;
            players: Record<"main", {
                walkSpeed: number;
                canJumpTimeout: NodeJS.Timeout | null;
                canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                videoElement: HTMLVideoElement | null;
            }>;
            sliceVids: Record<string, {
                waitingForPlayToDoLoopRuleName: string | null;
            }>;
        }[K_Type_13][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_13]>>];
        frameDuration: number;
    }) => void; }>, hookDeps?: any[] | undefined) => void;
    addItem: <K_Type_14 extends "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids">(addItemOptions: {
        type: K_Type_14;
        name: string;
        state?: Partial<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_14][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_14]>>]> | undefined;
        refs?: Partial<{
            global: Record<"main", {
                sounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                music: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                musicEffects: {
                    lowPass: BiquadFilterNode | null;
                    compress: DynamicsCompressorNode | null;
                    extraGain: GainNode | null;
                };
                solidParticleSystems: Record<string, import("@babylonjs/core").SolidParticleSystem>;
                timerSpeed: number;
                aConvoIsHappening_timeout: NodeJS.Timeout | null;
                camSegmentRulesOptions: Partial<{
                    [x: string]: Partial<{
                        [x: string]: (usefulStuff: Record<any, any>) => string;
                    }>;
                }> | null;
                onPickupButtonClick: ((pickupName: any) => void) | null;
                slateZoomMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "slateZoom";
                        valueGoal: "slateZoomGoal";
                        isMoving: "slateZoomIsMoving";
                        moveMode: "slateZoomMoveMode";
                        physicsConfigName: "slateZoomMoveConfigName";
                        physicsConfigs: "slateZoomMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                slatePosMoverRefs: {
                    velocity: import("chootils/dist/points2d").Point2D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "slatePos";
                        valueGoal: "slatePosGoal";
                        isMoving: "slatePosIsMoving";
                        moveMode: "slatePosMoveMode";
                        physicsConfigName: "slatePosMoveConfigName";
                        physicsConfigs: "slatePosMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                scene: import("@babylonjs/core").Scene | null;
                backdropVideoTex: import("../helpers/babylonjs/CustomVideoTexture").CustomVideoTexture | null;
                depthRenderer: import("@babylonjs/core").DepthRenderer | null;
                depthRenderTarget: import("@babylonjs/core").RenderTargetTexture | null;
                backdropPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropPostProcessEffect: import("@babylonjs/core").Effect | null;
                fxaaPostProcess: import("@babylonjs/core").PostProcess | null;
                backdropSize: {
                    width: number;
                    height: number;
                };
                stretchVideoSize: {
                    x: number;
                    y: number;
                };
                stretchVideoGoalSize: {
                    x: number;
                    y: number;
                };
                stretchSceneSize: {
                    x: number;
                    y: number;
                };
            }>;
            places: Record<string, {
                rootMesh: import("@babylonjs/core").AbstractMesh | null;
                spotPositions: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                spotRotations: {
                    [x: string]: import("@babylonjs/core").Vector3;
                };
                soundspotSounds: {
                    [x: string]: import("@babylonjs/core").Sound | null;
                };
                triggerMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                wallMeshes: {
                    [x: string]: import("@babylonjs/core").AbstractMesh | null;
                };
                camsRefs: {
                    [x: string]: {
                        camera: import("@babylonjs/core").TargetCamera | null;
                        camCubeMeshes: import("@babylonjs/core").AbstractMesh[];
                        probeTexture: import("@babylonjs/core").CubeTexture | null;
                        isTriggerable: boolean;
                    };
                };
            }>;
            dolls: Record<string | number, {
                animWeightsMoverRefs: {
                    stateNames: {
                        value: "animWeights";
                        valueGoal: "animWeightsGoal";
                        isMoving: "animWeightsIsMoving";
                        moveMode: "animWeightsMoveMode";
                        physicsConfigName: "animWeightsMoveConfigName";
                        physicsConfigs: "animWeightsMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                    animRefs: Record<string, {
                        velocity: number;
                        recentSpeeds: number[];
                    }>;
                    animNames: readonly string[];
                };
                rotationYMoverRefs: {
                    velocity: number;
                    recentSpeeds: number[];
                    stateNames: {
                        value: "rotationY";
                        valueGoal: "rotationYGoal";
                        isMoving: "rotationYIsMoving";
                        moveMode: "rotationYMoveMode";
                        physicsConfigName: "rotationYMoveConfigName";
                        physicsConfigs: "rotationYMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                positionMoverRefs: {
                    velocity: import("chootils/dist/points3d").Point3D;
                    recentSpeeds: number[];
                    averageSpeed: number;
                    canRunOnSlow: boolean;
                    stateNames: {
                        value: "position";
                        valueGoal: "positionGoal";
                        isMoving: "positionIsMoving";
                        moveMode: "positionMoveMode";
                        physicsConfigName: "positionMoveConfigName";
                        physicsConfigs: "positionMoveConfigs";
                    };
                    physicsConfigs: import("repond-movers/dist/types").DefinedPhysicsConfig;
                };
                meshRef: import("@babylonjs/core").AbstractMesh | null;
                otherMeshes: Record<string, import("@babylonjs/core").AbstractMesh | null>;
                entriesRef: import("@babylonjs/core").InstantiatedEntries | null;
                aniGroupsRef: Record<string, import("@babylonjs/core").AnimationGroup> | null;
                assetRefs: {
                    meshes: Record<string, import("@babylonjs/core").AbstractMesh>;
                    skeleton: import("@babylonjs/core").Skeleton;
                    bones: Record<string, import("@babylonjs/core").Bone>;
                    aniGroups: Record<string, import("@babylonjs/core").AnimationGroup>;
                    materials: Record<string, import("@babylonjs/core").Material>;
                } | null;
                groundRef: import("@babylonjs/core").AbstractMesh | null;
                checkCollisions: boolean;
            }>;
            models: Record<string, {
                container: import("@babylonjs/core").AssetContainer | null;
                materialRef: import("@babylonjs/core").PBRMaterial | null;
                materialRefs: import("@babylonjs/core").PBRMaterial[] | null;
            }>;
            story: Record<"main", Record<string, any>>;
            keyboards: Record<"main", {}>;
            miniBubbles: Record<string | number, {
                bubbleRef: any;
                textRef: any;
                videoRef: HTMLVideoElement | null;
            }>;
            characters: Record<string | number, {
                testRef: null;
            }>;
            players: Record<"main", {
                walkSpeed: number;
                canJumpTimeout: NodeJS.Timeout | null;
                canShowVirtualButtonsTimeout: NodeJS.Timeout | null;
                canHideVirtualButtonsTimeout: NodeJS.Timeout | null;
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                videoElement: HTMLVideoElement | null;
            }>;
            sliceVids: Record<string, {
                waitingForPlayToDoLoopRuleName: string | null;
            }>;
        }[K_Type_14][import("repond/dist/types").ExtendsString<import("repond/dist/types").KeysOfUnion<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }[K_Type_14]>>]> | undefined;
    }, callback?: any) => void;
    removeItem: (itemInfo: {
        type: "global" | "places" | "dolls" | "models" | "story" | "keyboards" | "miniBubbles" | "characters" | "players" | "speechBubbles" | "stateVids" | "sliceVids";
        name: string;
    }) => void;
    makeEmptyPatch: () => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    makeEmptyDiff: () => {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    applyPatch: (patch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => void;
    applyPatchHere: (newStates: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, patch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => void;
    getPatch: (prevState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, newState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>) => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    getPatchAndReversed: (prevState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, newState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>) => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }[];
    getReversePatch: (partialState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, newPatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    combineTwoPatches: (prevPatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }, newPatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    combinePatches: (patchesArray: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }[]) => {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    makeMinimalPatch: (currentStates: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, thePatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => void;
    removePartialPatch: (thePatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }, patchToRemove: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => void;
    getDiff: (prevState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>, newState: import("repond/dist/types").GetPartialState<{
        global: Record<"main", {
            slatePosMoveConfigName: string;
            timeScreenResized: number;
            interactButtonPressTime: number;
            heldPickups: string[];
            storyOverlayToggled: boolean;
            alarmTextIsVisible: boolean;
            alarmText: string;
            aSpeechBubbleIsShowing: boolean;
            aConvoIsHappening: boolean;
            frameTick: number;
            debugMessage: string;
            slateZoom: number;
            slateZoomGoal: number;
            slateZoomIsMoving: boolean;
            slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
            slateZoomMoveConfigName: string;
            slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            slatePos: import("chootils/dist/points2d").Point2D;
            slatePosGoal: import("chootils/dist/points2d").Point2D;
            slatePosIsMoving: boolean;
            slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
            slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            nowPlaceName: string;
            goalPlaceName: string | null;
            readyToSwapPlace: boolean;
            isLoadingBetweenPlaces: boolean;
            loadingOverlayToggled: boolean;
            loadingOverlayFullyShowing: boolean;
            goalCamWhenNextPlaceLoads: string | null;
            goalCamNameWhenVidPlays: string | null;
            goalCamNameAtLoop: string | null;
            goalCamName: string | null;
            nowCamName: string;
            nowSegmentName: string;
            goalSegmentName: string | null;
            goalSegmentNameAtLoop: string | null;
            goalSegmentNameWhenVidPlays: string | null;
            goalSegmentWhenGoalPlaceLoads: string | null;
            modelNamesLoaded: string[];
            newPlaceModelLoaded: boolean;
            newPlaceVideosLoaded: boolean;
            newPlaceProbesLoaded: boolean;
            playerCharacter: string;
            gravityValue: number;
            playerMovingPaused: boolean;
            focusedDoll: any;
            focusedDollIsInView: boolean;
        }>;
        places: Record<string, {
            testState: number;
        }>;
        dolls: Record<string | number, {
            nowAnimation: string;
            animationLoops: boolean;
            inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
            animWeights: Record<string, number>;
            animWeightsGoal: Record<string, number>;
            animWeightsIsMoving: boolean;
            animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
            animWeightsMoveConfigName: string;
            animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            positionOnScreen: import("chootils/dist/points2d").Point2D;
            rotationY: number;
            rotationYGoal: number;
            rotationYIsMoving: boolean;
            rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
            rotationYMoveConfigName: string;
            rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            position: import("chootils/dist/points3d").Point3D;
            positionGoal: import("chootils/dist/points3d").Point3D;
            positionIsMoving: boolean;
            positionMoveMode: import("repond-movers/dist/types").MoveMode;
            positionMoveConfigName: string;
            positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
            modelName: string;
            goalSpotName: string | null;
        }>;
        models: Record<string, {
            wantToLoad: boolean;
            isLoading: boolean;
            isLoaded: boolean;
        }>;
        story: Record<"main", any>;
        keyboards: Record<"main", {
            KeyW: boolean;
            KeyA: boolean;
            KeyS: boolean;
            KeyD: boolean;
            ArrowLeft: boolean;
            ArrowRight: boolean;
            ArrowUp: boolean;
            ArrowDown: boolean;
            KeyQ: boolean;
            KeyE: boolean;
            ShiftLeft: boolean;
            ControlLeft: boolean;
            Space: boolean;
            Enter: boolean;
            KeyZ: boolean;
            KeyM: boolean;
        }>;
        miniBubbles: Record<string | number, {
            isVisible: boolean;
            isFullyHidden: boolean;
            text: string;
            forCharacter: string | null;
            position: import("chootils/dist/points2d").Point2D;
        }>;
        characters: Record<string | number, {
            dollName: string;
            atTriggers: Partial<Record<string, boolean>>;
            atCamCubes: Partial<Record<string, boolean>>;
            hasLeftFirstTrigger: boolean;
        }>;
        players: Record<"main", {
            lastSafeInputAngle: number | null;
            inputVelocity: import("chootils/dist/points2d").Point2D;
            isJumping: boolean;
            isOnGround: boolean;
            canJump: boolean;
            interactButtonPressTime: number;
            jumpButtonPressTime: number;
            jumpButtonReleaseTime: number;
            pickupButtonPressTime: number;
            virtualControlsPressTime: number;
            virtualControlsReleaseTime: number;
            canShowVirtualButtons: boolean;
            animationNames: {
                walking: string;
                idle: string;
            };
        }>;
        speechBubbles: Record<string | number | symbol, any>;
        stateVids: Record<string | number, {
            vidState: import("./stateVids").VidState;
            playType: "pause" | "play";
            goalSeekTime: number | null;
            wantToPlay: boolean;
            wantToPause: boolean;
            wantToUnload: boolean;
            wantToLoad: boolean;
            videoSource: string;
            autoplay: boolean;
        }>;
        sliceVids: Record<string, {
            stateVidId_playing: string | null;
            stateVidId_waiting: string | null;
            sliceVidState: import("./sliceVids").SliceVidState;
            nowSlice: {
                time: number;
                duration: number;
            };
            goalSlice: import("./sliceVids").VidSlice | null;
            wantToLoad: boolean;
            wantToUnload: boolean;
            wantToLoop: boolean;
            switchSlice_keepProgress: boolean;
            newPlayingVidStartedTime: number;
            nowSliceSeekedTime: number;
        }>;
    }>) => {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    getDiffFromPatches: (forwardPatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }, reversePatch: {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    getPatchesFromDiff: (theDiff: {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => [{
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }, {
        changed: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }];
    combineTwoDiffs: (prevDiff: {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }, newDiff: {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }) => {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
    combineDiffs: (diffsArray: {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    }[]) => {
        changedNext: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        changedPrev: import("repond/dist/types").GetPartialState<{
            global: Record<"main", {
                slatePosMoveConfigName: string;
                timeScreenResized: number;
                interactButtonPressTime: number;
                heldPickups: string[];
                storyOverlayToggled: boolean;
                alarmTextIsVisible: boolean;
                alarmText: string;
                aSpeechBubbleIsShowing: boolean;
                aConvoIsHappening: boolean;
                frameTick: number;
                debugMessage: string;
                slateZoom: number;
                slateZoomGoal: number;
                slateZoomIsMoving: boolean;
                slateZoomMoveMode: import("repond-movers/dist/types").MoveMode;
                slateZoomMoveConfigName: string;
                slateZoomMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                slatePos: import("chootils/dist/points2d").Point2D;
                slatePosGoal: import("chootils/dist/points2d").Point2D;
                slatePosIsMoving: boolean;
                slatePosMoveMode: import("repond-movers/dist/types").MoveMode;
                slatePosMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                nowPlaceName: string;
                goalPlaceName: string | null;
                readyToSwapPlace: boolean;
                isLoadingBetweenPlaces: boolean;
                loadingOverlayToggled: boolean;
                loadingOverlayFullyShowing: boolean;
                goalCamWhenNextPlaceLoads: string | null;
                goalCamNameWhenVidPlays: string | null;
                goalCamNameAtLoop: string | null;
                goalCamName: string | null;
                nowCamName: string;
                nowSegmentName: string;
                goalSegmentName: string | null;
                goalSegmentNameAtLoop: string | null;
                goalSegmentNameWhenVidPlays: string | null;
                goalSegmentWhenGoalPlaceLoads: string | null;
                modelNamesLoaded: string[];
                newPlaceModelLoaded: boolean;
                newPlaceVideosLoaded: boolean;
                newPlaceProbesLoaded: boolean;
                playerCharacter: string;
                gravityValue: number;
                playerMovingPaused: boolean;
                focusedDoll: any;
                focusedDollIsInView: boolean;
            }>;
            places: Record<string, {
                testState: number;
            }>;
            dolls: Record<string | number, {
                nowAnimation: string;
                animationLoops: boolean;
                inRange: Record<string, import("../helpers/prendyUtils/dolls").InRangeForDoll>;
                animWeights: Record<string, number>;
                animWeightsGoal: Record<string, number>;
                animWeightsIsMoving: boolean;
                animWeightsMoveMode: import("repond-movers/dist/types").MoveMode;
                animWeightsMoveConfigName: string;
                animWeightsMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                positionOnScreen: import("chootils/dist/points2d").Point2D;
                rotationY: number;
                rotationYGoal: number;
                rotationYIsMoving: boolean;
                rotationYMoveMode: import("repond-movers/dist/types").MoveMode;
                rotationYMoveConfigName: string;
                rotationYMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                position: import("chootils/dist/points3d").Point3D;
                positionGoal: import("chootils/dist/points3d").Point3D;
                positionIsMoving: boolean;
                positionMoveMode: import("repond-movers/dist/types").MoveMode;
                positionMoveConfigName: string;
                positionMoveConfigs: Record<string, import("repond-movers/dist/types").PhysicsOptions>;
                modelName: string;
                goalSpotName: string | null;
            }>;
            models: Record<string, {
                wantToLoad: boolean;
                isLoading: boolean;
                isLoaded: boolean;
            }>;
            story: Record<"main", any>;
            keyboards: Record<"main", {
                KeyW: boolean;
                KeyA: boolean;
                KeyS: boolean;
                KeyD: boolean;
                ArrowLeft: boolean;
                ArrowRight: boolean;
                ArrowUp: boolean;
                ArrowDown: boolean;
                KeyQ: boolean;
                KeyE: boolean;
                ShiftLeft: boolean;
                ControlLeft: boolean;
                Space: boolean;
                Enter: boolean;
                KeyZ: boolean;
                KeyM: boolean;
            }>;
            miniBubbles: Record<string | number, {
                isVisible: boolean;
                isFullyHidden: boolean;
                text: string;
                forCharacter: string | null;
                position: import("chootils/dist/points2d").Point2D;
            }>;
            characters: Record<string | number, {
                dollName: string;
                atTriggers: Partial<Record<string, boolean>>;
                atCamCubes: Partial<Record<string, boolean>>;
                hasLeftFirstTrigger: boolean;
            }>;
            players: Record<"main", {
                lastSafeInputAngle: number | null;
                inputVelocity: import("chootils/dist/points2d").Point2D;
                isJumping: boolean;
                isOnGround: boolean;
                canJump: boolean;
                interactButtonPressTime: number;
                jumpButtonPressTime: number;
                jumpButtonReleaseTime: number;
                pickupButtonPressTime: number;
                virtualControlsPressTime: number;
                virtualControlsReleaseTime: number;
                canShowVirtualButtons: boolean;
                animationNames: {
                    walking: string;
                    idle: string;
                };
            }>;
            speechBubbles: Record<string | number | symbol, any>;
            stateVids: Record<string | number, {
                vidState: import("./stateVids").VidState;
                playType: "pause" | "play";
                goalSeekTime: number | null;
                wantToPlay: boolean;
                wantToPause: boolean;
                wantToUnload: boolean;
                wantToLoad: boolean;
                videoSource: string;
                autoplay: boolean;
            }>;
            sliceVids: Record<string, {
                stateVidId_playing: string | null;
                stateVidId_waiting: string | null;
                sliceVidState: import("./sliceVids").SliceVidState;
                nowSlice: {
                    time: number;
                    duration: number;
                };
                goalSlice: import("./sliceVids").VidSlice | null;
                wantToLoad: boolean;
                wantToUnload: boolean;
                wantToLoop: boolean;
                switchSlice_keepProgress: boolean;
                newPlayingVidStartedTime: number;
                nowSliceSeekedTime: number;
            }>;
        }>;
        added: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
        removed: Partial<{
            global: "main"[];
            places: string[];
            dolls: string[];
            models: string[];
            story: "main"[];
            keyboards: "main"[];
            miniBubbles: string[];
            characters: string[];
            players: "main"[];
            speechBubbles: string[];
            stateVids: string[];
            sliceVids: string[];
        }>;
    };
};
export declare type PrendyStoresUntypedType_ = typeof placeholderPrendyStores;
export declare type PrendyStoreHelpersUntypedType_ = typeof storeHelpers;
export declare type PrendyStoresUntypedType = Record<any, {
    state: (itemName: any) => any;
    refs: (itemName: any, type: any) => any;
    startStates?: Record<any, any>;
}>;
export declare type PrendyStoreHelpersUntypedType = {
    getState: () => Record<any, Record<any, Record<any, any | any[]>>>;
    getPreviousState: () => Record<any, Record<any, Record<any, any | any[]>>>;
    getRefs: () => Record<any, Record<any, Record<any, any | any[]>>>;
    setState: (newState: Record<any, Record<any, Record<any, any | any[]>>> | ((state: Record<any, Record<any, Record<any, any | any[]>>>) => any), callback?: (nextFrameDuration: number) => any) => void;
    startItemEffect: (...args: any) => any;
    startEffect: (...args: any) => any;
    stopEffect: (...args: any) => any;
    makeRules: (...args: any) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makeDynamicRules: (...args: any) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    onNextTick: (...args: any) => any;
    addItem: (...args: any) => any;
    removeItem: (...args: any) => any;
    getItem: (...args: any) => any;
    useStore: (...args: any) => any;
    useStoreItem: (...args: any) => any;
    useStoreEffect: (...args: any) => any;
    useStoreItemEffect: (...args: any) => any;
    useStoreItemPropsEffect: (...args: any) => any;
};
export interface PrendyStoresUntyped extends PrendyStoresUntypedType {
}
export interface PrendyStoreHelpersUntyped extends PrendyStoreHelpersUntypedType {
}
declare type ItemType = keyof ReturnType<PrendyStoreHelpersUntyped["getState"]>;
declare type HelperType<T extends ItemType> = StoreHelperTypes<PrendyStoreHelpersUntyped["getState"], PrendyStoreHelpersUntyped["getRefs"], T>;
export declare type AllItemsState<T extends ItemType> = HelperType<T>["AllItemsState"];
export declare type ItemState<T extends ItemType> = HelperType<T>["ItemState"];
export declare type ItemRefs<T extends ItemType> = HelperType<T>["ItemRefs"];
export declare type PlaceInfoByNamePlaceholder<PlaceName extends string> = Record<PlaceName, {
    modelFile: string;
    videoFiles: {
        backdrop: string;
    };
    cameraNames: readonly string[];
    segmentDurations: Record<string, number>;
    segmentNames: readonly string[];
    wallNames: readonly string[];
    floorNames: readonly string[];
    triggerNames: readonly string[];
    spotNames: readonly string[];
    soundspotNames: readonly string[];
    probesByCamera: Record<string, string>;
    segmentTimesByCamera: Record<string, Record<string, number>>;
}>;
export declare type ModelInfoByNamePlaceholder<ModelName extends string> = Record<ModelName, {
    modelFile: string;
    animationNames: readonly string[];
    boneNames: readonly string[];
    meshNames: readonly string[];
    materialNames: readonly string[];
    skeletonName: string;
}>;
export declare type PickupsInfoPlaceholder<PickupName extends string> = Record<PickupName, {
    name: string;
    hint: string;
    image: string;
}>;
export declare type DeepWriteable<T> = {
    -readonly [P in keyof T]: DeepWriteable<T[P]>;
};
declare type ToNewOptionUntyped = {
    toPlace: string;
    toSpot: string;
    toCam?: string;
    toSegment?: string;
};
export declare type PrendyOptionsUntyped = {
    place: string;
    segment: string;
    camera: string;
    heldPickups: string[];
    playerCharacter: string;
    playerAnimations: {
        walking: string;
        idle: string;
    };
    zoomLevels: {
        default: number;
        max: number;
    };
    walkSpeed: number;
    animationSpeed: number;
    headHeightOffset: number;
    doorsInfo?: Partial<Record<string, Partial<Record<string, ToNewOptionUntyped>>>>;
    modelNamesByPlace: Record<string, string[]>;
    hasInteracting?: boolean;
    hasJumping?: boolean;
};
declare type ToPlaceOption<AnyCameraName extends string, AnySegmentName extends string, PlaceName extends string, AnySpotName extends string> = {
    toPlace: PlaceName;
    toSpot: AnySpotName;
    toCam?: AnyCameraName;
    toSegment?: AnySegmentName;
};
export declare type PrendyOptionsGeneric<AnyCameraName extends string, AnySegmentName extends string, PlaceName extends string, CharacterName extends string, PickupName extends string, ModelName extends string, AnySpotName extends string> = {
    place: PlaceName;
    segment: AnySegmentName;
    camera: AnyCameraName;
    heldPickups: PickupName[];
    playerCharacter: CharacterName;
    zoomLevels: {
        default: number;
        max: number;
    };
    walkSpeed: number;
    animationSpeed: number;
    headHeightOffset: number;
    doorsInfo?: Partial<Record<PlaceName, Partial<Record<string, ToPlaceOption<AnyCameraName, AnySegmentName, PlaceName, AnySpotName>>>>>;
    modelNamesByPlace: Record<PlaceName, ModelName[]>;
};
export {};
