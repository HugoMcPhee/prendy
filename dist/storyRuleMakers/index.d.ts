import { BackdopConcepFuncs, PlaceInfoByNamePlaceholder } from "../concepts/typedConcepFuncs";
declare const _default: "default";
export default _default;
export declare function makeGetUsefulStoryStuff<ConcepFuncs extends BackdopConcepFuncs>(concepFuncs: ConcepFuncs): () => {
    storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
    storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
    globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
    chapterName: any;
    storyPart: any;
    nowSegmentName: any;
    nowPlaceName: any;
    placeState: Record<any, any>;
    nowCamName: any;
    placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
    placeRefs: Record<any, any>;
    camsRefs: any;
    camRefs: any;
};
export declare function makeSetStoryState<ConcepFuncs extends BackdopConcepFuncs>(concepFuncs: ConcepFuncs): (newState: Partial<ReturnType<ConcepFuncs["getState"]>["story"]["main"]>) => void;
export declare function makeAllStoryRuleMakers<ConcepFuncs extends BackdopConcepFuncs, PlaceName extends string, DollName extends string, CharacterName extends string, PickupName extends string, StoryPartName extends string, // maybe not have?
CameraNameByPlace extends Record<PlaceName, string>, PlaceInfoByName extends PlaceInfoByNamePlaceholder<string>, TriggerNameByPlace extends Record<PlaceName, string>>(concepFuncs: ConcepFuncs, placeInfoByName: PlaceInfoByName, characterNames: readonly CharacterName[], dollNames: readonly DollName[]): {
    makeCamChangeRules: (callBacksObject: Partial<{ [P_PlaceName in PlaceName]: Partial<{ [P_TriggerName in CameraNameByPlace[P_PlaceName]]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>; }>) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makeCamSegmentRules: (callBacksObject: Partial<{ [P_PlaceName_1 in PlaceName]: Partial<{ [P_CamName in keyof PlaceInfoByName[P_PlaceName_1]["segmentTimesByCamera"]]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => keyof PlaceInfoByName[P_PlaceName_1]["segmentTimesByCamera"][P_CamName]; }>; }>) => boolean;
    makeOnInteractAtTrigger: (callBacksObject: Partial<{ [P_PlaceName_2 in PlaceName]: Partial<{ [P_TriggerName_1 in TriggerNameByPlace[P_PlaceName_2]]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>; }>, characterName?: CharacterName) => () => void;
    makeOnInteractToTalk: (callBacksObject: Partial<{ [P_DollName in DollName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>, characterName?: CharacterName) => () => void;
    makeOnUsePickupAtTrigger: (callBacksObject: Partial<{ [P_PlaceName_3 in PlaceName]: Partial<{ [P_TriggerName_2 in TriggerNameByPlace[P_PlaceName_3]]: Partial<{ [P_PickupName in PickupName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>; }>; }>, characterName?: CharacterName) => <T_PickupName extends PickupName>(pickupName: T_PickupName) => boolean;
    makeOnUsePickupGenerally: (callBacksObject: Partial<{ [P_PickupName_1 in PickupName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>) => <T_PickupName_1 extends PickupName>(pickupName: T_PickupName_1) => void;
    makeOnUsePickupToTalk: (callBacksObject: Partial<{ [P_DollName_1 in DollName]: Partial<{ [P_PickupName_2 in PickupName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>; }>, characterName?: CharacterName) => <T_PickupName_2 extends PickupName>(pickupName: T_PickupName_2) => boolean;
    makePlaceLoadRules: (atStartOfEachPlace: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void, callBacksObject: Partial<{ [P_PlaceName_4 in PlaceName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makePlaceNotLoadedRules: (callBacksObject: Partial<{ [P_PlaceName_4 in PlaceName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makeStoryPartRules: (callBacksObject: Partial<Record<StoryPartName, (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void>>) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makeTouchRules: (callBacksObject: Partial<{ [P_DollName_2 in DollName]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>, options?: {
        characterName?: CharacterName;
        distanceType?: "touch" | "talk";
        whenLeave?: boolean;
    }) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
    makeTriggerRules: (callBacksObject: Partial<{ [P_PlaceName_5 in PlaceName]: Partial<{ [P_TriggerName_3 in TriggerNameByPlace[P_PlaceName_5]]: (usefulStuff: {
        storyState: ReturnType<ConcepFuncs["getState"]>["story"]["main"];
        storyRefs: ReturnType<ConcepFuncs["getRefs"]>["story"]["main"];
        globalState: ReturnType<ConcepFuncs["getState"]>["global"]["main"];
        chapterName: any;
        storyPart: any;
        nowSegmentName: any;
        nowPlaceName: any;
        placeState: Record<any, any>;
        nowCamName: any;
        placesRefs: ReturnType<ConcepFuncs["getRefs"]>["places"];
        placeRefs: Record<any, any>;
        camsRefs: any;
        camRefs: any;
    }) => void; }>; }>, options?: {
        characterName?: CharacterName;
        whenLeave?: boolean;
    }) => {
        stopAll: (...args: any) => any;
        startAll: (...args: any) => any;
        start: (...args: any) => any;
        stop: (...args: any) => any;
        ruleNames: any[];
    };
};
